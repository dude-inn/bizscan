# -*- coding: utf-8 -*-
"""
OpenAI-powered Gamma.app section generator for company enrichment
"""
from __future__ import annotations
import os
from typing import Any, Dict, List, Optional
from openai import OpenAI

DEFAULT_MODEL = os.getenv("OPENAI_MODEL_GAMMA", "gpt-4o-mini")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import logging
log = logging.getLogger(__name__)

def _log_openai_status():
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å OpenAI API"""
    api_key = os.getenv("OPENAI_API_KEY", "")
    log.info("=== OpenAI API Status ===")
    log.info(f"OpenAI API Key: {'‚úÖ Set' if api_key else '‚ùå Not set'}")
    log.info(f"Model: {DEFAULT_MODEL}")
    if not api_key:
        log.warning("‚ö†Ô∏è OpenAI API key not set - Gamma enrichment will be disabled")

# –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
_log_openai_status()

SYSTEM_PROMPT = """\
–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫. –°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –±–ª–æ–∫ –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ Gamma.app –¢–û–õ–¨–ö–û –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏.
–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å —Ñ–∞–∫—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –µ—Å—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö.
–§–æ—Ä–º–∞—Ç:
‚Äî –ê–±–∑–∞—Ü (2‚Äì4 —Å—Ç—Ä–æ–∫–∏): –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–ø–æ –û–ö–í–≠–î), –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–∞–¥—Ä–µ—Å/—Ä–µ–≥–∏–æ–Ω), —Ñ–æ—Ä–º–∞ (–û–ü–§/—Å—Ç–∞—Ç—É—Å).
‚Äî 3‚Äì6 –º–∞—Ä–∫–µ—Ä–æ–≤: –∫–∞–ø–∏—Ç–∞–ª –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏; –Ω–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º; —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤; –∫–æ–Ω—Ç–∞–∫—Ç—ã; –ø—Ä–∞–≤–æ–ø—Ä–µ–µ–º—Å—Ç–≤–æ; –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å).
‚Äî –°—Ç—Ä–æ–∫–∞ ¬´–ò—Å—Ç–æ—á–Ω–∏–∫–∏¬ª: —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ (–º–∞–∫—Å 4).
–°—Ç–∏–ª—å: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π.
"""

def build_user_prompt(company: Dict[str, Any], official_links: List[str]) -> str:
    name = company.get("name_full") or company.get("name") or ""
    inn = company.get("inn") or ""
    ogrn = company.get("ogrn") or ""
    okved = company.get("okved") or ""
    opf = company.get("opf") or company.get("org_form") or ""
    status_code = company.get("status_code") or company.get("status") or ""
    status_text = company.get("status_text") or ""
    reg_date = company.get("registration_date") or company.get("date_reg") or ""
    address = company.get("address") or ""
    head_name = company.get("manager_name") or company.get("head_name") or ""
    head_post = company.get("manager_post") or company.get("head_post") or ""
    charter_capital = company.get("charter_capital") or company.get("ustavnyi_kapital")
    owners = company.get("owners") or []
    tax_mode = company.get("tax_mode") or company.get("osob_rezhim")
    workers_count = company.get("workers_count") or company.get("–°–ß–†")
    contacts = company.get("contacts") or {}
    emails = []
    phones = []
    if isinstance(contacts, dict):
        emails = contacts.get("emails") or contacts.get("email") or []
        phones = contacts.get("phones") or contacts.get("tel") or []
        if isinstance(emails, str):
            emails = [emails]
        if isinstance(phones, str):
            phones = [phones]
    predecessors = company.get("predecessors") or company.get("–ø—Ä–∞–≤–æ–ø—Ä–µ–¥—à") or []
    successors = company.get("successors") or company.get("–ø—Ä–∞–≤–æ–ø—Ä–µ–µ–º") or []
    negative_lists = company.get("negative_lists") or company.get("–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ_—Å–ø–∏—Å–∫–∏") or []
    finances = company.get("finances_digest") or company.get("finances")

    header = f"{name} (–ò–ù–ù {inn}, –û–ì–†–ù {ogrn})"
    lines = [header]
    if okved:
        lines.append(f"–û–ö–í–≠–î: {okved}")
    if opf or status_code or status_text:
        st = status_text or status_code
        lines.append(f"–û–ü–§/—Å—Ç–∞—Ç—É—Å: {opf or '-'} / {st or '-'}")
    if reg_date:
        lines.append(f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}")
    if address:
        lines.append(f"–ê–¥—Ä–µ—Å: {address}")
    if head_name or head_post:
        lines.append(f"–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {(head_name or '-') + (' ‚Äî ' + head_post if head_post else '')}")
    if charter_capital is not None:
        lines.append(f"–£—Å—Ç–∞–≤–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {charter_capital}")
    if owners:
        try:
            owner_names = ", ".join([o.get("name") or o.get("–ù–∞–∏–º–ü–æ–ª–Ω") or "?" for o in owners if isinstance(o, dict)])
        except Exception:
            owner_names = ", ".join(map(str, owners))
        if owner_names:
            lines.append(f"–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏: {owner_names}")
    if tax_mode:
        lines.append(f"–ù–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º: {tax_mode}")
    if workers_count:
        lines.append(f"–°–ß–†: {workers_count}")
    if emails:
        lines.append(f"Email: {', '.join(emails[:3])}")
    if phones:
        lines.append(f"–¢–µ–ª: {', '.join(phones[:3])}")
    if predecessors:
        lines.append("–ü—Ä–∞–≤–æ–ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏: –¥–∞")
    if successors:
        lines.append("–ü—Ä–∞–≤–æ–ø—Ä–µ–µ–º–Ω–∏–∫–∏: –¥–∞")
    if negative_lists:
        lines.append("–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–∏—Å–∫–∏: –¥–∞")
    if finances and isinstance(finances, dict):
        # –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è: last_year, revenue, profit, assets, equity (–µ—Å–ª–∏ –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ)
        parts = []
        for k in ("last_year", "revenue", "profit", "assets", "equity"):
            if finances.get(k) is not None:
                parts.append(f"{k}:{finances.get(k)}")
        if parts:
            lines.append("–§–∏–Ω–∞–Ω—Å—ã (–¥–∞–π–¥–∂–µ—Å—Ç): " + "; ".join(parts))

    lines.append("")
    lines.append("### –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
    if official_links:
        for url in official_links[:4]:
            lines.append(f"- {url}")
    else:
        lines.append("- –ï–ì–†–Æ–õ (–§–ù–°)")
        lines.append("- –ì–ò–† –ë–û (–§–ù–°)")
        lines.append("- –ö–ê–î")

    return "\n".join(lines)

def generate_gamma_section(company: Dict[str, Any], official_links: List[str], *, model: Optional[str] = None) -> str:
    log.info(f"ü§ñ Generating Gamma section for: {company.get('name_full', 'Unknown')}")
    log.info(f"üîó Official links: {len(official_links)}")
    
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        log.warning("‚ùå OpenAI API key not set, using fallback")
        # fallback
        parts = [f"**{company.get('name_full') or company.get('name') or '–ö–æ–º–ø–∞–Ω–∏—è'}**"]
        if official_links:
            parts.append("**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** " + ", ".join(official_links[:4]))
        else:
            parts.append("**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** –ï–ì–†–Æ–õ (–§–ù–°); –ì–ò–† –ë–û (–§–ù–°); –ö–ê–î")
        return "\n\n".join(parts)
    
    try:
        log.info("üîß Initializing OpenAI client")
        client = OpenAI(api_key=api_key)
        mdl = model or DEFAULT_MODEL
        log.info(f"üìù Building prompt for model: {mdl}")
        
        user_prompt = build_user_prompt(company, official_links)
        log.info(f"üìè Prompt length: {len(user_prompt)} characters")
        
        log.info("üöÄ Sending request to OpenAI")
        resp = client.chat.completions.create(
            model=mdl,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.2,
            max_tokens=700,
        )
        
        result = resp.choices[0].message.content.strip()
        log.info(f"‚úÖ OpenAI response received: {len(result)} characters")
        return result
        
    except Exception as e:
        log.error(f"‚ùå OpenAI generation failed: {e}")
        # Fallback to simple format
        parts = [f"**{company.get('name_full') or company.get('name') or '–ö–æ–º–ø–∞–Ω–∏—è'}**"]
        parts.append(f"_–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}_")
        if official_links:
            parts.append("**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** " + ", ".join(official_links[:4]))
        return "\n\n".join(parts)
