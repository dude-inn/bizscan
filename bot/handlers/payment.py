# -*- coding: utf-8 -*-
"""
Payment handlers
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from decimal import Decimal
from core.logger import get_logger
from services.robokassa import RobokassaService
from services.orders import OrderService
from core.config import load_settings

router = Router(name="payment")
log = get_logger(__name__)

settings = load_settings()
robokassa = RobokassaService(settings)
order_service = OrderService(settings.SQLITE_PATH)

@router.callback_query(F.data == "pay_report")
async def pay_report(cb: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –æ—Ç—á—ë—Ç–∞"""
    try:
        await cb.answer()
    except Exception as e:
        log.warning("Could not answer callback query", error=str(e))
    if not settings.ENABLE_PAYMENTS or settings.REPORT_PRICE <= 0:
        await state.update_data(order_id=None, payment_url=None)
        await cb.message.answer("–û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø–ª–∞—Ç–µ–∂–∞.")
        from bot.handlers.company import generate_report
        return await generate_report(cb, state)
    
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    query = data.get("query")
    company_name = data.get("company_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è")
    company_inn = data.get("company_inn", query)
    
    if not query:
        await cb.message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    try:
        # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
        order_id = await order_service.create_order(
            user_id=cb.from_user.id,
            company_inn=company_inn,
            company_name=company_name,
            amount=Decimal(str(settings.REPORT_PRICE))
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        payment_url = robokassa.build_payment_url(
            inv_id=order_id,
            amount=Decimal(str(settings.REPORT_PRICE)),
            description=f"–û—Ç—á—ë—Ç –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏ {company_name} (–ò–ù–ù: {company_inn})",
            email=None,
            extra_params={"shp_user": str(cb.from_user.id)}
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        from bot.keyboards.main import payment_status_kb
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
        ])
        
        await cb.message.answer(
            f"üí≥ **–û–ø–ª–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞**\n\n"
            f"üìÑ –ö–æ–º–ø–∞–Ω–∏—è: {company_name}\n"
            f"üè¢ –ò–ù–ù: {company_inn}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {settings.REPORT_PRICE} ‚ÇΩ\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(order_id=order_id, payment_url=payment_url)
        
    except Exception as e:
        log.error("Payment setup failed", error=str(e), user_id=cb.from_user.id)
        await cb.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



@router.callback_query(F.data == "pay_report_pdf")
async def pay_report_pdf(cb: CallbackQuery, state: FSMContext):
    await state.update_data(gamma_export_as="pdf")
    return await pay_report(cb, state)


@router.callback_query(F.data == "pay_report_pptx")
async def pay_report_pptx(cb: CallbackQuery, state: FSMContext):
    await state.update_data(gamma_export_as="pptx")
    return await pay_report(cb, state)


@router.callback_query(F.data == "check_payment")
async def check_payment(cb: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    try:
        await cb.answer()
    except Exception as e:
        log.warning("Could not answer callback query", error=str(e))
    
    data = await state.get_data()
    order_id = data.get("order_id")
    
    if not order_id:
        await cb.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    try:
        order = await order_service.get_order(order_id)
        if not order:
            await cb.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        if order["status"] == "paid":
            # –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á—ë—Ç–∞
            await cb.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á—ë—Ç–∞...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å order_id
            await state.update_data(order_id=order_id)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞
            from bot.handlers.company import generate_report
            await generate_report(cb, state)
            
        elif order["status"] == "pending":
            await cb.message.answer(
                "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...\n\n"
                "–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_payment")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
                ])
            )
        else:
            await cb.message.answer(f"‚ùå –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order['status']}")
            
    except Exception as e:
        log.error("Payment check failed", error=str(e), user_id=cb.from_user.id)
        await cb.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã.")
