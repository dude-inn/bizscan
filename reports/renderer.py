# -*- coding: utf-8 -*-
from typing import List
from io import BytesIO
import os
from pathlib import Path
import re
import textwrap
from core.logger import setup_logging

log = setup_logging()
from domain.models import CompanyFull
from settings import BRAND_NAME, BRAND_LINK

FREE_LOCK = "‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–ª–∞—Ç–Ω–æ–º –æ—Ç—á—ë—Ç–µ"

def render_free(company: CompanyFull) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    lines = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    lines.append(f"‚ú® {BRAND_NAME}: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á—ë—Ç")
    
    # –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
    card_lines = []
    if company.short_name:
        card_lines.append(f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {company.short_name}")
    if company.full_name and company.full_name != company.short_name:
        card_lines.append(f"üìã –ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {company.full_name}")
    if company.inn:
        card_lines.append(f"üî¢ –ò–ù–ù: {company.inn}")
    if company.ogrn:
        ogrn_text = f"üî¢ –û–ì–†–ù: {company.ogrn}"
        if company.ogrn_date:
            ogrn_text += f" (–æ—Ç {company.ogrn_date})"
        card_lines.append(ogrn_text)
    if company.kpp:
        card_lines.append(f"üî¢ –ö–ü–ü: {company.kpp}")
    if company.status:
        card_lines.append(f"üìä –°—Ç–∞—Ç—É—Å: {company.status}")
    if company.reg_date:
        card_lines.append(f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {company.reg_date}")
    if company.address:
        card_lines.append(f"üìç –ê–¥—Ä–µ—Å: {company.address}")
    if company.director:
        card_lines.append(f"üë§ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {company.director}")
    
    if card_lines:
        lines.append("üìã –ö–ê–†–¢–û–ß–ö–ê –ö–û–ú–ü–ê–ù–ò–ò")
        lines.append("\n".join(card_lines))
    
    # –°–µ–∫—Ü–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
    sections = []
    
    # –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    activity_lines = []
    if company.okved_main:
        activity_lines.append(f"–û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {company.okved_main}")
    if company.okved_additional:
        activity_lines.append(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥—ã: {len(company.okved_additional)} —à—Ç.")
    if activity_lines:
        sections.append("üè¢ –î–ï–Ø–¢–ï–õ–¨–ù–û–°–¢–¨\n" + "\n".join(activity_lines) + f"\n{chr(0x1F512)} –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ {FREE_LOCK}")
    
    # –†–µ–∫–≤–∏–∑–∏—Ç—ã
    requisites_lines = []
    if company.msp_status:
        requisites_lines.append(f"–ú–°–ü-—Å—Ç–∞—Ç—É—Å: {company.msp_status}")
    if company.tax_authority:
        requisites_lines.append(f"–ù–∞–ª–æ–≥–æ–≤—ã–π –æ—Ä–≥–∞–Ω: {company.tax_authority}")
    if company.stats_codes:
        requisites_lines.append(f"–ö–æ–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {len(company.stats_codes)} —à—Ç.")
    if requisites_lines:
        sections.append("üìÑ –†–ï–ö–í–ò–ó–ò–¢–´\n" + "\n".join(requisites_lines) + f"\n{chr(0x1F512)} –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ {FREE_LOCK}")
    
    # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    if company.contacts:
        contact_lines = []
        for contact_type, values in company.contacts.items():
            if values:
                contact_lines.append(f"{contact_type}: {', '.join(values[:2])}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
        if contact_lines:
            sections.append("üìû –ö–û–ù–¢–ê–ö–¢–´\n" + "\n".join(contact_lines) + f"\n{chr(0x1F512)} –í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã {FREE_LOCK}")
    
    # –§–∏–Ω–∞–Ω—Å—ã
    if company.finance:
        sections.append("üí∞ –§–ò–ù–ê–ù–°–´\n" + f"–î–∞–Ω–Ω—ã–µ –∑–∞ {len(company.finance)} –ª–µ—Ç\n{chr(0x1F512)} –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å {FREE_LOCK}")
    
    # –ü—Ä–∞–≤–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    if company.flags:
        sections.append("‚öñÔ∏è –ü–†–ê–í–û–í–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´\n" + f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len([f for f in company.flags.__dict__.values() if f is not None])} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π\n{chr(0x1F512)} –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {FREE_LOCK}")
    
    # –£—á—Ä–µ–¥–∏—Ç–µ–ª–∏
    if company.founders:
        sections.append("üë• –£–ß–†–ï–î–ò–¢–ï–õ–ò\n" + f"–ù–∞–π–¥–µ–Ω–æ {len(company.founders)} —É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π\n{chr(0x1F512)} –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ {FREE_LOCK}")
    
    # –õ–∏—Ü–µ–Ω–∑–∏–∏
    if company.licenses:
        sections.append("üìú –õ–ò–¶–ï–ù–ó–ò–ò\n" + f"–ù–∞–π–¥–µ–Ω–æ {len(company.licenses)} –ª–∏—Ü–µ–Ω–∑–∏–π\n{chr(0x1F512)} –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è {FREE_LOCK}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏
    for section in sections:
        lines.append("")
        lines.append(section)
    
    # –ü–æ–¥–ø–∏—Å—å
    lines.append("")
    lines.append(f"üìù –ü–æ–¥–ø–∏—Å—å: {BRAND_LINK}")
    
    return lines

def render_full(company: CompanyFull) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    lines = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    lines.append(f"‚ú® {BRAND_NAME}: –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç")
    
    # –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
    card_lines = []
    if company.short_name:
        card_lines.append(f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {company.short_name}")
    if company.full_name and company.full_name != company.short_name:
        card_lines.append(f"üìã –ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {company.full_name}")
    if company.inn:
        card_lines.append(f"üî¢ –ò–ù–ù: {company.inn}")
    if company.ogrn:
        ogrn_text = f"üî¢ –û–ì–†–ù: {company.ogrn}"
        if company.ogrn_date:
            ogrn_text += f" (–æ—Ç {company.ogrn_date})"
        card_lines.append(ogrn_text)
    if company.kpp:
        card_lines.append(f"üî¢ –ö–ü–ü: {company.kpp}")
    if company.status:
        card_lines.append(f"üìä –°—Ç–∞—Ç—É—Å: {company.status}")
    if company.reg_date:
        card_lines.append(f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {company.reg_date}")
    if company.address:
        card_lines.append(f"üìç –ê–¥—Ä–µ—Å: {company.address}")
    if company.director:
        card_lines.append(f"üë§ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {company.director}")
    
    if card_lines:
        lines.append("üìã –ö–ê–†–¢–û–ß–ö–ê –ö–û–ú–ü–ê–ù–ò–ò")
        lines.append("\n".join(card_lines))
    
    # –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if company.okved_main or company.okved_additional:
        lines.append("")
        lines.append("üè¢ –î–ï–Ø–¢–ï–õ–¨–ù–û–°–¢–¨")
        if company.okved_main:
            lines.append(f"–û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {company.okved_main}")
        if company.okved_additional:
            lines.append("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
            for okved in company.okved_additional[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                lines.append(f"  ‚Ä¢ {okved}")
            if len(company.okved_additional) > 10:
                lines.append(f"  ... –∏ –µ—â–µ {len(company.okved_additional) - 10}")
    
    # –†–µ–∫–≤–∏–∑–∏—Ç—ã
    if company.msp_status or company.tax_authority or company.stats_codes:
        lines.append("")
        lines.append("üìÑ –†–ï–ö–í–ò–ó–ò–¢–´")
        if company.msp_status:
            lines.append(f"M–°–ü-—Å—Ç–∞—Ç—É—Å: {company.msp_status}")
        if company.tax_authority:
            lines.append(f"–ù–∞–ª–æ–≥–æ–≤—ã–π –æ—Ä–≥–∞–Ω: {company.tax_authority}")
    if company.stats_codes:
            lines.append("–ö–æ–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
            for code, value in company.stats_codes.items():
                lines.append(f"  ‚Ä¢ {code}: {value}")

    # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    if company.contacts:
        lines.append("")
        lines.append("üìû –ö–û–ù–¢–ê–ö–¢–´")
        for contact_type, values in company.contacts.items():
            if values:
                lines.append(f"{contact_type.title()}:")
                for value in values:
                    lines.append(f"  ‚Ä¢ {value}")
    
    # –§–∏–Ω–∞–Ω—Å—ã
    if company.finance:
        lines.append("")
        lines.append("üí∞ –§–ò–ù–ê–ù–°–´")
        for fy in sorted(company.finance, key=lambda x: x.year, reverse=True):
            year_data = [f"{fy.year}:"]
            if fy.revenue:
                year_data.append(f"–≤—ã—Ä—É—á–∫–∞ {fy.revenue}")
            if fy.profit:
                year_data.append(f"–ø—Ä–∏–±—ã–ª—å {fy.profit}")
            if fy.assets:
                year_data.append(f"–∞–∫—Ç–∏–≤—ã {fy.assets}")
            if fy.liabilities:
                year_data.append(f"–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ {fy.liabilities}")
            lines.append(" ".join(year_data))
    
    # –ü—Ä–∞–≤–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    if company.flags:
        flags = []
        if company.flags.arbitration: flags.append("–∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –¥–µ–ª–∞")
        if company.flags.bankruptcy: flags.append("–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ")
        if company.flags.exec_proceedings: flags.append("–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
        if company.flags.inspections: flags.append("–ø—Ä–æ–≤–µ—Ä–∫–∏")
        if company.flags.mass_director: flags.append("–º–∞—Å—Å–æ–≤—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å")
        if company.flags.mass_founder: flags.append("–º–∞—Å—Å–æ–≤—ã–π —É—á—Ä–µ–¥–∏—Ç–µ–ª—å")
        if company.flags.unreliable_address: flags.append("–Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞")
        if company.flags.unreliable_director: flags.append("–Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
        if company.flags.unreliable_founder: flags.append("–Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å —É—á—Ä–µ–¥–∏—Ç–µ–ª—è")
        if company.flags.tax_debt: flags.append("–Ω–∞–ª–æ–≥–æ–≤–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å")
        if company.flags.disqualified: flags.append("–¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏—Ü–∞")
        if company.flags.unreliable_supplier: flags.append("–Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏")
        
        if flags:
            lines.append("")
            lines.append("‚öñÔ∏è –ü–†–ê–í–û–í–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´")
            for flag in flags:
                lines.append(f"  ‚ö†Ô∏è {flag}")
    
    # –£—á—Ä–µ–¥–∏—Ç–µ–ª–∏
    if company.founders:
        lines.append("")
        lines.append("üë• –£–ß–†–ï–î–ò–¢–ï–õ–ò")
        for founder in company.founders:
            founder_info = founder.name
            if founder.share:
                founder_info += f" (–¥–æ–ª—è: {founder.share})"
            lines.append(f"  ‚Ä¢ {founder_info}")
    
    # –õ–∏—Ü–µ–Ω–∑–∏–∏
    if company.licenses:
        lines.append("")
        lines.append("üìú –õ–ò–¶–ï–ù–ó–ò–ò")
        for license in company.licenses:
            license_info = license.type
            if license.number:
                license_info += f" (‚Ññ {license.number})"
            if license.date:
                license_info += f" –æ—Ç {license.date}"
            if license.authority:
                license_info += f" ({license.authority})"
            lines.append(f"  ‚Ä¢ {license_info}")
    
    # –ü–æ–¥–ø–∏—Å—å
    lines.append("")
    lines.append(f"üìù –ü–æ–¥–ø–∏—Å—å: {BRAND_LINK}")
    
    return lines

def _find_font_path() -> str:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π (Windows Arial)
    candidates = []
    env_path = os.getenv("PDF_FONT_PATH")
    if env_path:
        candidates.append(env_path)
    windir = os.getenv("WINDIR", r"C:\\Windows")
    candidates += [
        rf"{windir}\\Fonts\\arial.ttf",
        rf"{windir}\\Fonts\\Arial.ttf",
        rf"{windir}\\Fonts\\segoeui.ttf",
    ]
    for p in candidates:
        try:
            if Path(p).exists():
                return p
        except Exception:
            continue
    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    local = Path(__file__).resolve().parent / "Arial.ttf"
    if local.exists():
        return str(local)
    raise FileNotFoundError("No suitable TTF font found for PDF generation. Set PDF_FONT_PATH to a valid .ttf")


def generate_pdf(data: CompanyFull) -> bytes:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ PDF –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ (fpdf2 + —Å–∏—Å—Ç–µ–º–Ω—ã–π TTF –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)."""
    from fpdf import FPDF

    log.info("PDF: start generate_free")
    font_path = _find_font_path()
    log.info("PDF: font path chosen", font_path=font_path)

    pdf = FPDF(format="A4")
    pdf.set_auto_page_break(auto=True, margin=12)
    pdf.add_page()
    pdf.add_font("Custom", "", font_path, uni=True)
    log.info("PDF: font added")
    
    pdf.set_font("Custom", size=16)
    pdf.cell(0, 10, txt=f"{BRAND_NAME}: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç", ln=1)
    log.info("PDF: title added")
    
    pdf.set_font("Custom", size=11)
    log.info("PDF: font set to 11pt")

    def sanitize(text: str) -> str:
        # –£–¥–∞–ª—è–µ–º/–∑–∞–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö TTF (—ç–º–æ–¥–∑–∏, –ø—Å–µ–≤–¥–æ–≥—Ä–∞—Ñ–∏–∫–∞)
        replacements = {
            "‚ú®": "*",
            "‚úÖ": "+",
            "‚ùå": "-",
            "‚óÄ": "<",
            "‚ñ∂": ">",
            "‚ñ™": "-",
            "‚Ä¢": "-",
            "‚Äî": "-",
            "‚Äì": "-",
            "‚Äú": '"',
            "‚Äù": '"',
            "‚Äô": "'",
            "¬´": '"',
            "¬ª": '"',
            "‚ñë": ".",
            "‚ñí": ".",
            "‚ñì": ".",
        }
        for k, v in replacements.items():
            text = text.replace(k, v)
        # –ù–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –∏ –Ω—É–ª–µ–≤–æ–π —à–∏—Ä–∏–Ω—ã –ø—Ä–æ–±–µ–ª—ã ‚Üí –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–±–µ–ª
        text = text.replace("\u00A0", " ")  # NBSP
        text = text.replace("\u200B", "")   # Zero-width space
        text = text.replace("\uFEFF", "")   # BOM
        text = text.replace("\u202F", " ")  # Narrow NBSP
        text = text.replace("\u2009", " ")  # Thin space
        text = text.replace("\u2007", " ")  # Figure space
        text = text.replace("\u2060", "")   # Word joiner
        text = re.sub(r"[\u2000-\u200A\u205F\u3000]", " ", text)
        # –£–±–∏—Ä–∞–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
        text = re.sub(r"[\x00-\x08\x0B\x0C\x0E-\x1F]", "", text)
        return text

    def safe_render_text(pdf, text: str) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏"""
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        cleaned = re.sub(r"[^0-9A-Za-z–ê-–Ø–∞-—è–Å—ë()""'¬´¬ª‚Ññ:;.,/\\-\s]", "", text)
        cleaned = cleaned.replace("\u00A0", " ").replace("\u2007", " ").replace("\u202F", " ")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ (–º–∞–∫—Å–∏–º—É–º 25 —Å–∏–º–≤–æ–ª–æ–≤)
        words = cleaned.split()
        current_line = ""
        
        for word in words:
            # –ï—Å–ª–∏ —Å–ª–æ–≤–æ —Å–∞–º–æ –ø–æ —Å–µ–±–µ –¥–ª–∏–Ω–Ω–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
            if len(word) > 25:
                if current_line:
                    try:
                        pdf.multi_cell(0, 6, txt=current_line.strip())
                    except:
                        pass
                    current_line = ""
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 20 —Å–∏–º–≤–æ–ª–æ–≤
                for i in range(0, len(word), 20):
                    chunk = word[i:i+20]
                    try:
                        pdf.multi_cell(0, 6, txt=chunk)
                    except:
                        pass
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
            test_line = (current_line + " " + word).strip()
            if len(test_line) <= 25:
                current_line = test_line
            else:
                # –ü–µ—á–∞—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                if current_line:
                    try:
                        pdf.multi_cell(0, 6, txt=current_line.strip())
                    except:
                        pass
                current_line = word
        
        # –ü–µ—á–∞—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
        if current_line:
            try:
                pdf.multi_cell(0, 6, txt=current_line.strip())
            except:
                pass

    lines = render_free(data)
    log.info("PDF: lines prepared", blocks=len(lines))
    
    for bi, block in enumerate(lines):
        log.info("PDF: processing block", block_index=bi, block_length=len(block))
        for li, raw_line in enumerate(block.split("\n")):
            line = sanitize(raw_line)
            log.info("PDF: rendering line", block_index=bi, line_index=li, line_length=len(line))
            safe_render_text(pdf, line)
        pdf.ln(2)
        log.info("PDF: block completed", block_index=bi)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–π—Ç—ã PDF
    log.info("PDF: generating final bytes")
    pdf_bytes: bytes = pdf.output(dest="S")
    log.info("PDF: generated", size=len(pdf_bytes))
    return pdf_bytes
