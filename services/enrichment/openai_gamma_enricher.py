# -*- coding: utf-8 -*-
"""
OpenAI-powered Gamma.app section generator for company enrichment
"""
from __future__ import annotations
import os
from typing import Any, Dict, List, Optional
from openai import OpenAI

DEFAULT_MODEL = os.getenv("OPENAI_MODEL_GAMMA", "gpt-4o-mini")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import logging
log = logging.getLogger(__name__)

def _log_openai_status():
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å OpenAI API"""
    api_key = os.getenv("OPENAI_API_KEY", "")
    log.info("=== OpenAI API Status ===")
    log.info(f"OpenAI API Key: {'‚úÖ Set' if api_key else '‚ùå Not set'}")
    log.info(f"Model: {DEFAULT_MODEL}")
    if not api_key:
        log.warning("‚ö†Ô∏è OpenAI API key not set - Gamma enrichment will be disabled")

# –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
_log_openai_status()

SYSTEM_PROMPT = """\
–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–≤–µ–¥–∏ –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ –Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏.
–ù–∞–π–¥–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
- –û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
- –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è
- –ó–Ω–∞—á–∏–º—ã–µ —Ñ–∞–∫—Ç—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
- –¢–µ–∫—É—â–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
‚Äî –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
‚Äî 3-5 –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –æ –∫–æ–º–ø–∞–Ω–∏–∏
‚Äî –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

–°—Ç–∏–ª—å: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π.
"""

def build_user_prompt(company: Dict[str, Any], official_links: List[str]) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"""
    name = company.get("name_full") or company.get("name") or ""
    inn = company.get("inn") or ""
    address = company.get("address") or ""
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç —Ç–æ–ª—å–∫–æ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    prompt = f"""–ü—Ä–æ–≤–µ–¥–∏ –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ –Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏:
- –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
- –ê–¥—Ä–µ—Å: {address}  
- –ò–ù–ù: {inn}

–ù–∞–π–¥–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
- –û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
- –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è
- –ó–Ω–∞—á–∏–º—ã–µ —Ñ–∞–∫—Ç—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
- –¢–µ–∫—É—â–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
    
    return prompt

def generate_gamma_section(company: Dict[str, Any], official_links: List[str], *, model: Optional[str] = None) -> str:
    log.info(f"ü§ñ Generating Gamma section for: {company.get('name_full', 'Unknown')}")
    # official_links should already be strings from build_official_links
    if not official_links:
        official_links = []
    # Ensure all are strings (defensive programming)
    official_links = [str(link) for link in official_links if link]
    log.info(f"üîó Official links: {len(official_links)}")
    
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        log.warning("‚ùå OpenAI API key not set, using fallback")
        # fallback
        parts = [f"**{company.get('name_full') or company.get('name') or '–ö–æ–º–ø–∞–Ω–∏—è'}**"]
        if official_links:
            # Ensure all items in official_links are strings
            official_links_str = [str(link) for link in official_links if link]
            parts.append("**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** " + ", ".join(official_links_str[:4]))
        else:
            parts.append("**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** –ï–ì–†–Æ–õ (–§–ù–°); –ì–ò–† –ë–û (–§–ù–°); –ö–ê–î")
        return "\n\n".join(parts)
    
    try:
        log.info("üîß Initializing OpenAI client")
        client = OpenAI(api_key=api_key)
        mdl = model or DEFAULT_MODEL
        log.info(f"üìù Building prompt for model: {mdl}")
        
        user_prompt = build_user_prompt(company, official_links)
        log.info(f"üìè Prompt length: {len(user_prompt)} characters")
        
        log.info("üöÄ Sending request to OpenAI")
        resp = client.chat.completions.create(
            model=mdl,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.2,
            max_tokens=700,
        )
        
        result = resp.choices[0].message.content.strip()
        log.info(f"‚úÖ OpenAI response received: {len(result)} characters")
        return result
        
    except Exception as e:
        log.error(f"‚ùå OpenAI generation failed: {e}")
        # Fallback to simple format
        parts = [f"**{company.get('name_full') or company.get('name') or '–ö–æ–º–ø–∞–Ω–∏—è'}**"]
        parts.append(f"_–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}_")
        if official_links:
            # Ensure all items in official_links are strings
            official_links_str = [str(link) for link in official_links if link]
            parts.append("**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** " + ", ".join(official_links_str[:4]))
        return "\n\n".join(parts)
