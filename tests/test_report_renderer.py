# -*- coding: utf-8 -*-
"""
Tests for report rendering functions
"""
import pytest
from decimal import Decimal
from services.aggregator import build_markdown_report
from services.mappers.datanewton import CompanyCard, FinanceSnapshot, ArbitrationCase, ArbitrationSummary


class TestReportRenderer:
    """Test report rendering functionality"""
    
    def test_render_with_complete_data(self):
        """Test report rendering with complete data"""
        card = CompanyCard(
            inn="1234567890",
            ogrn="1234567890123",
            kpp="123456789",
            name_full="Test Company LLC",
            name_short="Test LLC",
            registration_date="2020-01-01",
            status_code="ACTIVE",
            status_text="–î–µ–π—Å—Ç–≤—É–µ—Ç",
            address="123 Test Street, Test City",
            manager_name="John Doe",
            manager_post="CEO",
            okved="62.01",
            is_msme=True
        )
        
        finances = [
            FinanceSnapshot(
                period="2023",
                revenue=Decimal("1000000"),
                net_profit=Decimal("100000"),
                assets=Decimal("500000"),
                equity=Decimal("300000"),
                long_term_liabilities=Decimal("100000"),
                short_term_liabilities=Decimal("100000")
            )
        ]
        
        taxes = []
        
        arbitration = ArbitrationSummary(
            total=2,
            cases=[
                ArbitrationCase(
                    number="A01-123/2023",
                    date_start="2023-01-01",
                    role="–û—Ç–≤–µ—Ç—á–∏–∫",
                    amount=Decimal("50000"),
                    court="–ê–° –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã",
                    instances="–ê–° –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã"
                )
            ]
        )
        
        report = build_markdown_report(card, finances, taxes, arbitration)
        
        # Check that all sections are present
        assert "üßæ **–†–µ–∫–≤–∏–∑–∏—Ç—ã**" in report
        assert "Test Company LLC" in report
        assert "Test LLC" in report
        assert "–ò–ù–ù 1234567890" in report
        assert "–û–ì–†–ù 1234567890123" in report
        assert "–ö–ü–ü 123456789" in report
        assert "üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: 2020-01-01" in report
        assert "**–°—Ç–∞—Ç—É—Å:** ‚úÖ –î–µ–π—Å—Ç–≤—É–µ—Ç" in report
        assert "üìç **–ê–¥—Ä–µ—Å:** 123 Test Street, Test City" in report
        assert "üè∑Ô∏è **–û–ö–í–≠–î:** 62.01" in report
        assert "üßë‚Äçüíº **–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å**" in report
        assert "John Doe ‚Äî CEO" in report
        assert "üß© **–ú–°–ü**" in report
        assert "–Ø–≤–ª—è–µ—Ç—Å—è —Å—É–±—ä–µ–∫—Ç–æ–º –ú–°–ü" in report
        assert "üìä **–§–∏–Ω–∞–Ω—Å—ã**" in report
        assert "2023: –≤—ã—Ä—É—á–∫–∞ 1 000 000.00‚ÇΩ" in report
        assert "üí∞ **–£–ø–ª–∞—á–µ–Ω–Ω—ã–µ –Ω–∞–ª–æ–≥–∏**" in report
        assert "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö" in report
        assert "üìÑ **–ê—Ä–±–∏—Ç—Ä–∞–∂**" in report
        assert "–í—Å–µ–≥–æ –¥–µ–ª: 2" in report
        assert "–ê01-123/2023 ‚Äî 2023-01-01 ‚Äî –û—Ç–≤–µ—Ç—á–∏–∫" in report
        assert "üîó **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**" in report
        assert "–ï–ì–†–Æ–õ/–†–æ—Å—Å—Ç–∞—Ç" in report
    
    def test_render_with_minimal_data(self):
        """Test report rendering with minimal data"""
        card = CompanyCard(
            inn="1234567890",
            ogrn=None,
            kpp=None,
            name_full="Test Company",
            name_short=None,
            registration_date=None,
            status_code="UNKNOWN",
            status_text=None,
            address=None,
            manager_name=None,
            manager_post=None,
            okved=None,
            is_msme=None
        )
        
        finances = []
        taxes = []
        arbitration = ArbitrationSummary(total=0, cases=[])
        
        report = build_markdown_report(card, finances, taxes, arbitration)
        
        # Check that minimal data is handled gracefully
        assert "Test Company" in report
        assert "–ò–ù–ù 1234567890" in report
        assert "–û–ì–†–ù ‚Äî" in report
        assert "–ö–ü–ü" not in report  # Should not show KPP if None
        assert "**–°—Ç–∞—Ç—É—Å:** ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" in report
        assert "üìç **–ê–¥—Ä–µ—Å:** ‚Äî" in report
        assert "üè∑Ô∏è **–û–ö–í–≠–î:** ‚Äî" in report
        assert "‚Äî" in report  # Manager should show as dash
        assert "üß© **–ú–°–ü**" in report
        assert "‚Äî" in report  # MSME should show as dash
        assert "üìä **–§–∏–Ω–∞–Ω—Å—ã**" in report
        assert "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" in report
        assert "üí∞ **–£–ø–ª–∞—á–µ–Ω–Ω—ã–µ –Ω–∞–ª–æ–≥–∏**" in report
        assert "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö" in report
        assert "üìÑ **–ê—Ä–±–∏—Ç—Ä–∞–∂**" in report
        assert "–ù–µ—Ç –¥–µ–ª" in report
    
    def test_render_with_partial_finances(self):
        """Test report rendering with partial financial data"""
        card = CompanyCard(
            inn="1234567890",
            ogrn="1234567890123",
            kpp=None,
            name_full="Test Company",
            name_short=None,
            registration_date=None,
            status_code="ACTIVE",
            status_text="–î–µ–π—Å—Ç–≤—É–µ—Ç",
            address=None,
            manager_name=None,
            manager_post=None,
            okved=None,
            is_msme=False
        )
        
        finances = [
            FinanceSnapshot(
                period="2023",
                revenue=Decimal("1000000"),
                net_profit=None,  # Missing profit
                assets=Decimal("500000"),
                equity=None,  # Missing equity
                long_term_liabilities=None,  # Missing long-term liabilities
                short_term_liabilities=Decimal("100000")
            )
        ]
        
        taxes = []
        arbitration = ArbitrationSummary(total=0, cases=[])
        
        report = build_markdown_report(card, finances, taxes, arbitration)
        
        # Check that partial financial data is handled
        assert "2023: –≤—ã—Ä—É—á–∫–∞ 1 000 000.00‚ÇΩ, –ø—Ä–∏–±—ã–ª—å N/A" in report
        assert "–∞–∫—Ç–∏–≤—ã 500 000.00‚ÇΩ, –∫–∞–ø–∏—Ç–∞–ª N/A" in report
        assert "–¥–æ–ª–≥.–æ–±—è–∑. N/A, –∫—Ä–∞—Ç–∫.–æ–±—è–∑. 100 000.00‚ÇΩ" in report
        assert "–ù–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–±—ä–µ–∫—Ç–æ–º –ú–°–ü" in report
    
    def test_render_with_multiple_finance_periods(self):
        """Test report rendering with multiple finance periods"""
        card = CompanyCard(
            inn="1234567890",
            ogrn="1234567890123",
            kpp=None,
            name_full="Test Company",
            name_short=None,
            registration_date=None,
            status_code="ACTIVE",
            status_text="–î–µ–π—Å—Ç–≤—É–µ—Ç",
            address=None,
            manager_name=None,
            manager_post=None,
            okved=None,
            is_msme=None
        )
        
        finances = [
            FinanceSnapshot(
                period="2021",
                revenue=Decimal("800000"),
                net_profit=Decimal("80000"),
                assets=Decimal("400000"),
                equity=Decimal("200000"),
                long_term_liabilities=Decimal("100000"),
                short_term_liabilities=Decimal("100000")
            ),
            FinanceSnapshot(
                period="2022",
                revenue=Decimal("900000"),
                net_profit=Decimal("90000"),
                assets=Decimal("450000"),
                equity=Decimal("250000"),
                long_term_liabilities=Decimal("100000"),
                short_term_liabilities=Decimal("100000")
            ),
            FinanceSnapshot(
                period="2023",
                revenue=Decimal("1000000"),
                net_profit=Decimal("100000"),
                assets=Decimal("500000"),
                equity=Decimal("300000"),
                long_term_liabilities=Decimal("100000"),
                short_term_liabilities=Decimal("100000")
            )
        ]
        
        taxes = []
        arbitration = ArbitrationSummary(total=0, cases=[])
        
        report = build_markdown_report(card, finances, taxes, arbitration)
        
        # Check that multiple periods are shown
        assert "2021: –≤—ã—Ä—É—á–∫–∞ 800 000.00‚ÇΩ" in report
        assert "2022: –≤—ã—Ä—É—á–∫–∞ 900 000.00‚ÇΩ" in report
        assert "2023: –≤—ã—Ä—É—á–∫–∞ 1 000 000.00‚ÇΩ" in report
