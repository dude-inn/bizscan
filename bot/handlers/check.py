# -*- coding: utf-8 -*-
"""
Check command handler for direct company lookup
"""
import re
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from bot.states import SearchState
from bot.keyboards.main import choose_report_kb
from services.aggregator import fetch_company_report_markdown
from core.logger import get_logger

router = Router(name="check")
log = get_logger(__name__)


def _is_inn(query: str) -> bool:
    """Check if query is INN"""
    return re.match(r'^\d{10}$|^\d{12}$', query) is not None


def _is_ogrn(query: str) -> bool:
    """Check if query is OGRN"""
    return re.match(r'^\d{13}$|^\d{15}$', query) is not None


def _is_digits_only(query: str) -> bool:
    """Check if query contains only digits"""
    return re.match(r'^\d+$', query) is not None


@router.message(Command("check"))
async def check_command(msg: Message, state: FSMContext):
    """Handle /check command with company query"""
    log.info("check_command", user_id=msg.from_user.id)
    
    # Extract query from command
    query = msg.text.replace("/check", "").strip()
    log.debug("extracted query", query=query, user_id=msg.from_user.id)
    
    if not query:
        await msg.answer(
            "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã**\n\n"
            "`/check <–ò–ù–ù/–û–ì–†–ù –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏>`\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ `/check 3801098402` (–ò–ù–ù)\n"
            "‚Ä¢ `/check 1083801006860` (–û–ì–†–ù)\n"
            "‚Ä¢ `/check –ì–∞–∑–ø—Ä–æ–º` (–Ω–∞–∑–≤–∞–Ω–∏–µ)\n\n"
            "üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞**: –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–µ OFData."
        )
        return
    
    # Check if query is digits only (INN/OGRN)
    if _is_digits_only(query):
        is_inn = _is_inn(query)
        is_ogrn = _is_ogrn(query)
        log.debug("parsed query type", 
                is_digits_only=True, 
                is_inn=is_inn, 
                is_ogrn=is_ogrn, 
                query=query, 
                user_id=msg.from_user.id)
        
        if is_inn or is_ogrn:
            # Valid INN/OGRN - proceed with report
            log.debug("valid INN/OGRN", query=query, user_id=msg.from_user.id)
            await _process_valid_query(msg, state, query)
        else:
            log.warning("check_command: invalid INN/OGRN format", query=query, user_id=msg.from_user.id)
            await msg.answer(
                "‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù/–û–ì–†–ù**\n\n"
                "‚Ä¢ –ò–ù–ù: 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä\n"
                "‚Ä¢ –û–ì–†–ù: 13 –∏–ª–∏ 15 —Ü–∏—Ñ—Ä\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞."
            )
    else:
        # Text query - check if name search is available
        log.debug("text query", query=query, user_id=msg.from_user.id)
        try:
            from bot.handlers.settings import get_user_data_source
            user_source = get_user_data_source(msg.from_user.id)
        except ImportError:
            from settings import DATASOURCE
            user_source = DATASOURCE
        
        log.debug("data source", user_source=user_source, user_id=msg.from_user.id)
        
        if user_source == "ofdata":
            # Try name search
            log.debug("proceed with name search", query=query, user_id=msg.from_user.id)
            await _process_name_search(msg, state, query)
        else:
            log.debug("name search not available", user_source=user_source, user_id=msg.from_user.id)
            await msg.answer(
                "‚ùå **–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n"
                "–¢–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫: **–ò—Å—Ç–æ—á–Ω–∏–∫ 1**\n"
                "–î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–∏—Å–∫ –ø–æ –ò–ù–ù/–û–ì–†–ù.\n\n"
                "–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:\n"
                "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/source`\n"
                "2. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ **OFData**\n"
                "3. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫"
            )


async def _process_valid_query(msg: Message, state: FSMContext, query: str):
    """Process valid INN/OGRN query"""
    log.info("process_valid_query", query=query, user_id=msg.from_user.id)
    
    # Show loading message
    status_msg = await msg.answer("‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏...")
    log.debug("loading message sent", user_id=msg.from_user.id)
    
    try:
        # Get company report
        log.debug("calling fetch_company_report_markdown", query=query, user_id=msg.from_user.id)
        response = await fetch_company_report_markdown(query)
        log.debug("aggregator response", length=len(response) if response else 0, user_id=msg.from_user.id)
        
        if not response or response.startswith("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π") or response.startswith("–û—à–∏–±–∫–∞"):
            await status_msg.edit_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù/–û–ì–†–ù")
            return
        
        # Report is ready
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–∫–∞—á–∞—Ç—å TXT", callback_data="download_txt")],
            [InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_inn")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
        
        await status_msg.edit_text(
            "‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.",
            reply_markup=keyboard
        )
        
        # Save data for download
        log.debug("saving company_text", length=len(response), user_id=msg.from_user.id)
        await state.update_data(company_text=response)
        log.debug("company_text saved", user_id=msg.from_user.id)
        
    except Exception as e:
        log.error("Check command failed", error=str(e), user_id=msg.from_user.id)
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


async def _process_name_search(msg: Message, state: FSMContext, query: str):
    """Process name search query"""
    log.info("process_name_search", query=query, user_id=msg.from_user.id)
    
    # Show loading message
    status_msg = await msg.answer("‚è≥ –ò—â—É –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...")
    
    try:
        # Get company report (this will try name search)
        response = await fetch_company_report_markdown(query)
        
        if not response or response.startswith("–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞") or response.startswith("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù/–û–ì–†–ù"):
            await status_msg.edit_text(
                "‚ùå **–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏\n"
                "‚Ä¢ –í–≤–µ—Å—Ç–∏ –ò–ù–ù –∏–ª–∏ –û–ì–†–ù\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è"
            )
            return
        
        if response.startswith("–û—à–∏–±–∫–∞"):
            await status_msg.edit_text(f"‚ùå {response}")
            return
        
        # Report is ready
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–∫–∞—á–∞—Ç—å TXT", callback_data="download_txt")],
            [InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_inn")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
        
        await status_msg.edit_text(
            "‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.",
            reply_markup=keyboard
        )
        
        # Save data for download
        log.info("_process_name_search: saving company_text to state", 
                text_length=len(response),
                text_preview=response[:200] if response else None,
                user_id=msg.from_user.id)
        await state.update_data(company_text=response)
        log.info("_process_name_search: company_text saved to state successfully", user_id=msg.from_user.id)
        
    except Exception as e:
        log.error("Name search failed", error=str(e), user_id=msg.from_user.id)
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–º–ø–∞–Ω–∏–∏: {str(e)}")
