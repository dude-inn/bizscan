# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""
import json
import tempfile
from typing import Optional
import asyncio
import os
from pathlib import Path
import inspect

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile

from bot.states import SearchState, ReportState, FeedbackState
from bot.keyboards.main import choose_report_kb, report_menu_kb, choose_format_kb
from services.aggregator import fetch_company_report_markdown, fetch_company_profile
from core.logger import get_logger
from settings import FEEDBACK_CHAT_ID
from settings_texts import (
    REPORT_WAIT_HINT, GAMMA_PROGRESS_HINTS, TEXT_CHOOSE_FORMAT, TEXT_CHOOSE_FORMAT_HINT,
    TEXT_FORMAT_PDF_SELECTED, TEXT_FORMAT_PPTX_SELECTED, TEXT_CHAT_ID_ERROR,
    TEXT_REPORT_STARTING, TEXT_REPORT_PDF_FORMING, TEXT_REPORT_PPTX_FORMING,
    TEXT_REPORT_PDF_FALLBACK, TEXT_REPORT_LINK_AVAILABLE, TEXT_REPORT_ERROR_DETAILED,
    TEXT_PDF_STATUS_FORMING, TEXT_PDF_STATUS_DISABLED, TEXT_PDF_STATUS_NO_QUERY,
    TEXT_PDF_STATUS_NO_DATA, TEXT_PDF_STATUS_FORMING_DETAILED, TEXT_PDF_STATUS_ERROR,
    TEXT_PDF_STATUS_SUCCESS, TEXT_PDF_STATUS_ERROR_FINAL, TEXT_FEEDBACK_PROMPT,
    TEXT_REPORT_PAID_ORDER_MISSING, TEXT_REPORT_NO_QUERY, TEXT_REPORT_COMPANY_NOT_FOUND,
    TEXT_REPORT_SUCCESS_DOCX_ONLY, TEXT_REPORT_DOWNLOAD_WARNING, TEXT_FEEDBACK_EMPTY,
    TEXT_FEEDBACK_SUCCESS, TEXT_FEEDBACK_FAILED, TEXT_FEEDBACK_TECH_ERROR, TEXT_FEEDBACK_ADMIN_CHAT_MISSING
)

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä
router = Router(name="company_fixed")

@router.callback_query(F.data == "format_pdf")
async def choose_format_pdf(cb: CallbackQuery, state: FSMContext):
    await state.update_data(gamma_export_as="pdf")
    await cb.answer("–§–æ—Ä–º–∞—Ç: PDF –≤—ã–±—Ä–∞–Ω")


@router.callback_query(F.data == "format_pptx")
async def choose_format_pptx(cb: CallbackQuery, state: FSMContext):
    await state.update_data(gamma_export_as="pptx")
    await cb.answer("–§–æ—Ä–º–∞—Ç: PPTX –≤—ã–±—Ä–∞–Ω")


# –õ–æ–≥–≥–µ—Ä
log = get_logger(__name__)

@router.message(F.text == "/id")
async def show_chat_id(msg: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç chat_id —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ (–ª–∏—á–∫–∞/–≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª)."""
    try:
        chat_id = msg.chat.id
        chat_type = msg.chat.type
        user_id = msg.from_user.id if msg.from_user else None
        log.info("chat_id_request", chat_id=chat_id, chat_type=chat_type, user_id=user_id)
        await msg.answer(f"chat_id: {chat_id}\nchat_type: {chat_type}\nuser_id: {user_id}")
    except Exception as e:
        log.warning("chat_id_request_failed", error=str(e))
        await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

@router.callback_query(F.data.in_({"report_generate", "report_generate_pdf", "report_generate_pptx"}))
async def generate_report(cb: CallbackQuery, state: FSMContext):
    """–ï–¥–∏–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ (PDF + DOCX –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)"""
    print("DEBUG: generate_report called")  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    log.info("generate_report: starting", user_id=cb.from_user.id)
    if cb.data == "report_generate_pdf":
        await state.update_data(gamma_export_as="pdf")
    elif cb.data == "report_generate_pptx":
        await state.update_data(gamma_export_as="pptx")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    from services.orders import OrderService
    from core.config import load_settings
    settings = load_settings()
    order_service = OrderService(settings.SQLITE_PATH)
    
    data = await state.get_data()
    order_id = data.get("order_id")
    
    if order_id:
        order = await order_service.get_order(order_id)
        if not order or order["status"] != "paid":
            await cb.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –æ–ø–ª–∞—á–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –æ—Ç—á—ë—Ç.")
            return
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–∞, —Å–æ–∑–¥–∞—ë–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        log.warning("No order found, creating free report", user_id=cb.from_user.id)
    
    # Track report generation start
    from services.stats import StatsService
    from core.config import load_settings
    settings = load_settings()
    stats = StatsService(settings.SQLITE_PATH)
    await stats.track_event("report_start", cb.from_user.id, {"query": await state.get_data()})
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å timeout
    try:
        await cb.answer()
    except Exception as e:
        log.warning("Could not answer callback query", error=str(e))
    
    # –ü–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
    try:
        current = await state.get_data()
        export_as = (current.get("gamma_export_as") or "").lower()
        if export_as not in ("pdf", "pptx"):
            await cb.message.answer(
                TEXT_CHOOSE_FORMAT + "\n\n" + TEXT_CHOOSE_FORMAT_HINT,
                reply_markup=choose_format_kb(),
                disable_web_page_preview=True,
            )
            await cb.answer()
            return
    except Exception:
        pass

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    status_msg = await cb.message.answer(
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚Äî –∏–¥—ë—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞.\n\n" + REPORT_WAIT_HINT
    )
    file_sent = False
    # –§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∞–ø–¥–µ–π—Ç–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    stop_cycle_event = asyncio.Event()
    async def _cycle_status_updates():
        stages = [
            "–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –ï–ì–†–Æ–õ –∏ –§–ù–°‚Ä¶",
            "–ü–æ–ª—É—á–∞—é —Å–≤–µ–¥–µ–Ω–∏—è –∏–∑ –ö–ê–î –∏ –ï–§–†–°–ë‚Ä¶",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≥–æ—Å–∑–∞–∫—É–ø–∫–∏ –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã‚Ä¶",
            "–°–≤–µ—Ä—è—é –Ω–∞–ª–æ–≥–æ–≤—É—é –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å‚Ä¶",
            "–ü—Ä–æ–≤–µ—Ä—è—é —Å–≤–µ–¥–µ–Ω–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö –∏ —à—Ç—Ä–∞—Ñ–∞—Ö‚Ä¶",
            "–°—Ç—Ä–æ—é –∫–∞—Ä—Ç—É —Å–≤—è–∑–µ–π –∏ –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤‚Ä¶",
        ]
        frames = ["‚è≥", "‚åõ", "üîÑ", "üõ†Ô∏è", "üìä", "üßÆ"]
        step = 0
        total = len(stages)
        while not stop_cycle_event.is_set():
            frame = frames[step % len(frames)]
            stage = stages[step % total]
            text = (
                f"{frame} {stage}"
                f"\n\n–≠—Ç–∞–ø {step % total + 1} –∏–∑ {total}"
                f"\n\n{REPORT_WAIT_HINT}"
            )
            try:
                await status_msg.edit_text(text)
            except Exception:
                pass
            try:
                await asyncio.wait_for(stop_cycle_event.wait(), timeout=8)
            except asyncio.TimeoutError:
                step += 1
                continue
            break
    cycle_task = asyncio.create_task(_cycle_status_updates())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        log.debug("get_state")
        data = await state.get_data()
        query = data.get("query", "")
        log.debug("state", query=query)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ò–ù–ù –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        company_name = None
        company_inn = None
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        preview = data.get("company_preview") or {}
        if isinstance(preview, dict):
            company_inn = preview.get("inn") or preview.get("–ò–ù–ù")
            company_name = preview.get("name_short") or preview.get("name_full") or preview.get("name")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
        if not company_name or not company_inn:
            companies = data.get("all_companies", []) or []
            if isinstance(companies, list):
                for c in companies:
                    if not isinstance(c, dict):
                        continue
                    c_inn = c.get("inn") or c.get("–ò–ù–ù") or c.get("tax_number")
                    if str(c_inn) == str(query):
                        company_inn = c_inn
                        company_name = (c.get("–ù–∞–∏–º–°–æ–∫—Ä") or c.get("name_short") or 
                                      c.get("–ù–∞–∏–º–ü–æ–ª–Ω") or c.get("name_full") or c.get("name"))
                        break
        
        log.debug("company_info", company_name=company_name, company_inn=company_inn)
        
        if not query:
            log.warning("No query in state", user_id=cb.from_user.id)
            await status_msg.edit_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
        log.info("fetch_report", query=query, user_id=cb.from_user.id)
        response = await fetch_company_report_markdown(query)
        log.debug("report_ready", length=len(response) if response else 0)
        
        if not response or response.startswith("‚ùå"):
            log.warning("Invalid query or company not found", query=query, response=response[:200] if response else None, user_id=cb.from_user.id)
            await status_msg.edit_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù/–û–ì–†–ù")
            return
        
        log.info("report_ok", query=query, length=len(response))
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        try:
            stop_cycle_event.set()
            await asyncio.sleep(0)  # –æ—Ç–¥–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
        except Exception:
            pass
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞ –ø–æ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (pdf|pptx). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é PDF
        data = await state.get_data()
        export_as = (data.get("gamma_export_as") or "pdf").lower()
        main_file_path = None
        main_file_sent = False
        try:
            from settings import GAMMA_THEME
            log.info("gamma_main:start", user_id=cb.from_user.id, export_as=export_as)
            await status_msg.edit_text(
                ("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚Äî –∏–¥—ë—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ PDF-–æ—Ç—á—ë—Ç–∞.\n\n" if export_as == "pdf" else
                 "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚Äî –∏–¥—ë—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π PPTX-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏.\n\n") + REPORT_WAIT_HINT
            )
            try:
                await cb.bot.send_chat_action(cb.message.chat.id, "upload_document")
            except Exception:
                pass
            import time
            start_time = time.time()

            def update_progress(status, elapsed, timeout):
                minutes = int(elapsed // 60)
                seconds = int(elapsed % 60)
                # –î–æ–±–∞–≤–∏–º –≤—Ä–∞—â–∞—é—â–∏–µ—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
                try:
                    hint = GAMMA_PROGRESS_HINTS[int(elapsed // 15) % len(GAMMA_PROGRESS_HINTS)]
                except Exception:
                    hint = ""
                extra = f"\n{hint}" if hint else ""
                progress_text = (
                    f"‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Å–Ω–æ–≤–Ω–æ–π PDF-–æ—Ç—á—ë—Ç...{extra}\n\n–°—Ç–∞—Ç—É—Å: {status}\n–ü—Ä–æ—à–ª–æ: {minutes}–º {seconds}—Å"
                )
                try:
                    result = status_msg.edit_text(progress_text)
                    if inspect.isawaitable(result):
                        asyncio.create_task(result)
                except Exception:
                    pass
                try:
                    send_action = cb.bot.send_chat_action(cb.message.chat.id, "upload_document")
                    if inspect.isawaitable(send_action):
                        asyncio.create_task(send_action)
                except Exception:
                    pass

            from settings import ENABLE_GAMMA_PDF
            log.info("Gamma main: checking settings", ENABLE_GAMMA_PDF=ENABLE_GAMMA_PDF, user_id=cb.from_user.id)
            main_file_path = None
            if ENABLE_GAMMA_PDF:
                log.info("Gamma main: starting generation", user_id=cb.from_user.id, export_as=export_as)
                try:
                    if export_as == "pptx":
                        from services.export.gamma_exporter import generate_pptx_from_report_text
                        main_file_path = generate_pptx_from_report_text(
                            response,
                            language="ru",
                            theme_name=GAMMA_THEME or None,
                            progress_callback=update_progress,
                            company_name=company_name,
                            company_inn=company_inn,
                        )
                    else:
                        from services.export.gamma_exporter import generate_pdf_from_report_text
                        main_file_path = generate_pdf_from_report_text(
                            response,
                            language="ru",
                            theme_name=GAMMA_THEME or None,
                            progress_callback=update_progress,
                            company_name=company_name,
                            company_inn=company_inn,
                        )
                    log.info("Gamma main: generation completed", user_id=cb.from_user.id, path=main_file_path)
                except Exception as e:
                    log.error("Gamma main: generation failed", user_id=cb.from_user.id, error=str(e))
                    main_file_path = None
            else:
                log.info("Gamma main: disabled", user_id=cb.from_user.id)
            end_time = time.time()
            log.info("gamma_main:done", user_id=cb.from_user.id, duration=end_time-start_time, path=main_file_path)
            # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª—Å—è, —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ DOCX
            if ENABLE_GAMMA_PDF and not main_file_path:
                try:
                    await cb.message.answer(
                        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á—ë—Ç. –Ø –æ—Ç–ø—Ä–∞–≤–ª—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (DOCX)."
                    )
                except Exception:
                    pass
        except Exception as e:
            log.warning("Gamma PDF failed", error=str(e), user_id=cb.from_user.id)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DOCX –≤–º–µ—Å—Ç–æ TXT
        log.info("docx:start", user_id=cb.from_user.id)
        from docx import Document
        from docx.shared import Pt
        from docx.oxml.ns import qn
        from docx.enum.text import WD_ALIGN_PARAGRAPH

        doc = Document()
        # –ë–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å
        style = doc.styles['Normal']
        style.font.name = 'Calibri'
        style._element.rPr.rFonts.set(qn('w:eastAsia'), 'Calibri')
        style.font.size = Pt(11)

        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç—á—ë—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–±–∑–∞—Ü—ã
        for line in response.splitlines():
            if line.strip() == '':
                doc.add_paragraph('')
                continue
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π (====) –¥–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–º–∏
            if set(line.strip()) == {'='} and len(line.strip()) >= 10:
                # –≠—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç.–∫. –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                continue
            p = doc.add_paragraph()
            run = p.add_run(line)
            # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –±—ã–ª–∞ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏/–∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            if line.isupper() and len(line) < 60:
                run.bold = True

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.docx', delete=False) as tmp:
            doc.save(tmp.name)
            temp_path = tmp.name
        log.debug("docx:saved", temp_path=temp_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        log.info("send_files", user_id=cb.from_user.id)
        with open(temp_path, 'rb') as file:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ DOCX —Ñ–∞–π–ª–∞
            if company_name and company_inn:
                from services.export.gamma_exporter import _safe_filename
                safe_name = _safe_filename(company_name)
                docx_filename = f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ_{safe_name}_{company_inn}.docx"
            else:
                docx_filename = "company_report.docx"
            
            document = BufferedInputFile(file.read(), filename=docx_filename)
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª (–∏–ª–∏ —Å—Å—ã–ª–∫—É), –∑–∞—Ç–µ–º DOCX –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if main_file_path:
                if isinstance(main_file_path, str) and main_file_path.startswith("LINK:"):
                    link = main_file_path.split("LINK:", 1)[1]
                    await cb.message.answer(
                        f"üìé {'PDF' if export_as=='pdf' else 'PPTX'}-–≤–µ—Ä—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {link}"
                    )
                else:
                    with open(main_file_path, 'rb') as fpdf:
                        from aiogram.types import BufferedInputFile as BIF
                        log.debug("send_main_file", path=main_file_path, user_id=cb.from_user.id)
                        # –§–æ—Ä–º–∏—Ä—É–µ–º caption
                        pdf_caption = "üìÑ –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á—ë—Ç (PDF)" if export_as == "pdf" else "üìä –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á—ë—Ç (PPTX)"
                        if company_name and company_inn:
                            from services.export.gamma_exporter import _safe_filename
                            safe_name = _safe_filename(company_name)
                            pdf_caption = (
                                f"üìÑ {safe_name} (–ò–ù–ù: {company_inn}) - –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á—ë—Ç (PDF)"
                                if export_as == "pdf" else
                                f"üìä {safe_name} (–ò–ù–ù: {company_inn}) - –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á—ë—Ç (PPTX)"
                            )
                        
                        await cb.message.answer_document(
                            BIF(fpdf.read(), filename=Path(main_file_path).name),
                            caption=pdf_caption
                        )
                        main_file_sent = True
            await status_msg.edit_text("‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤! –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (DOCX)...")
            
            # Track successful report generation
            await stats.track_event("report_success", cb.from_user.id, {
                "company_name": company_name,
                "company_inn": company_inn,
                "has_pdf": main_file_sent if export_as == "pdf" else False,
                "has_docx": True
            })

            # –ü–æ–¥—Å—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5
            try:
                await stats.track_event("gamma_generation", cb.from_user.id, {"format": export_as})
                today_cnt = await stats.get_event_count_today("gamma_generation")
                if today_cnt % 5 == 0:
                    admin_chat = str(FEEDBACK_CHAT_ID or "").strip()
                    if admin_chat:
                        await cb.bot.send_message(
                            admin_chat,
                            f"üì£ Gamma –æ—Ç—á—ë—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {today_cnt} (–ª–∏–º–∏—Ç 50). –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{cb.from_user.id}")
            except Exception as _e:
                log.warning("gamma_generation:notify_failed", error=str(_e))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º caption –¥–ª—è DOCX
            docx_caption = "üìé –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫ –æ—Ç—á—ë—Ç—É (DOCX)"
            if company_name and company_inn:
                from services.export.gamma_exporter import _safe_filename
                safe_name = _safe_filename(company_name)
                docx_caption = f"üìé {safe_name} (–ò–ù–ù: {company_inn}) - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫ –æ—Ç—á—ë—Ç—É (DOCX)"
            
            await cb.message.answer_document(
                document,
                caption=docx_caption
            )
            # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏ –¥–≤–µ –∫–Ω–æ–ø–∫–∏
            from bot.keyboards.main import after_report_kb
            await cb.message.answer(
                "‚ö†Ô∏è –í–∞–∂–Ω–æ: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª—ã —Å–µ–π—á–∞—Å. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –∫–µ—à –º–æ–≥—É—Ç –∏—Å—Ç–µ—á—å, –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—ã–¥–∞—á–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=after_report_kb()
            )
            file_sent = True
        log.info("send_done", user_id=cb.from_user.id)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        Path(temp_path).unlink(missing_ok=True)
        log.debug("temp_deleted", temp_path=temp_path)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞
        await state.set_state(ReportState.CHOOSE)
        
    except Exception as e:
        log.error("Error in generate_report", error=str(e), error_type=type(e).__name__, user_id=cb.from_user.id)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑, –¥–µ–ª–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç
        if order_id:
            try:
                from services.robokassa import RobokassaService
                from core.config import load_settings
                settings = load_settings()
                robokassa = RobokassaService(settings)
                await robokassa.refund_payment(
                    operation_id=str(order_id),
                    amount=str(settings.REPORT_PRICE),
                    reason="generation_failed"
                )
                log.info("Refund processed", order_id=order_id, user_id=cb.from_user.id)
            except Exception as refund_error:
                log.error("Refund failed", error=str(refund_error), order_id=order_id)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–µ –∑–∞—Ç–∏—Ä–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–æ–π
        if not file_sent:
            await status_msg.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞.\n\n"
                "üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API\n"
                "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏–∏\n"
                "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏\n\n"
                "üí∞ –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
                "‚è≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="report_generate")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                ])
            )


@router.callback_query(F.data == "report_pdf_gamma")
async def report_pdf_gamma(cb: CallbackQuery, state: FSMContext):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç PDF –ø–æ —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É"""
    await cb.answer()
    status = await cb.message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é PDF-–æ—Ç—á—ë—Ç‚Ä¶")
    try:
        from settings import ENABLE_GAMMA_PDF, GAMMA_THEME
        if not ENABLE_GAMMA_PDF:
            await status.edit_text("‚ùå PDF-–æ—Ç—á—ë—Ç –æ—Ç–∫–ª—é—á—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return
        data = await state.get_data()
        query = data.get("query", "")
        if not query:
            await status.edit_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç—á—ë—Ç–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ò–ù–ù –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        company_name = None
        company_inn = None
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        preview = data.get("company_preview") or {}
        if isinstance(preview, dict):
            company_inn = preview.get("inn") or preview.get("–ò–ù–ù")
            company_name = preview.get("name_short") or preview.get("name_full") or preview.get("name")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
        if not company_name or not company_inn:
            companies = data.get("all_companies", []) or []
            if isinstance(companies, list):
                for c in companies:
                    if not isinstance(c, dict):
                        continue
                    c_inn = c.get("inn") or c.get("–ò–ù–ù") or c.get("tax_number")
                    if str(c_inn) == str(query):
                        company_inn = c_inn
                        company_name = (c.get("–ù–∞–∏–º–°–æ–∫—Ä") or c.get("name_short") or 
                                      c.get("–ù–∞–∏–º–ü–æ–ª–Ω") or c.get("name_full") or c.get("name"))
                        break
        report_text = await fetch_company_report_markdown(query)
        if not report_text or report_text.startswith("‚ùå"):
            await status.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        await status.edit_text("‚è≥ –§–æ—Ä–º–∏—Ä—É—é PDF-–≤–µ—Ä—Å–∏—é –æ—Ç—á—ë—Ç–∞...\n\nüìÑ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 15 –º–∏–Ω—É—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PDF.\n\n‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        async def update_progress(status, elapsed, timeout):
            minutes = int(elapsed // 60)
            seconds = int(elapsed % 60)
            progress_text = f"‚è≥ –§–æ—Ä–º–∏—Ä—É—é PDF-–≤–µ—Ä—Å–∏—é –æ—Ç—á—ë—Ç–∞...\n\nüìÑ –°—Ç–∞—Ç—É—Å: {status}\n‚è∞ –ü—Ä–æ—à–ª–æ: {minutes}–º {seconds}—Å\n\n‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            await status.edit_text(progress_text)
        
        from services.export.gamma_exporter import generate_pdf_from_report_text
        log.info("Starting Gamma PDF generation from button", user_id=cb.from_user.id)
        import time
        start_time = time.time()
        pdf_path = generate_pdf_from_report_text(
            report_text, 
            language="ru", 
            theme_name=GAMMA_THEME or None, 
            progress_callback=update_progress,
            company_name=company_name,
            company_inn=company_inn,
        )
        end_time = time.time()
        log.info("Gamma PDF generation from button completed", user_id=cb.from_user.id, duration=end_time-start_time, pdf_path=pdf_path)
        if not pdf_path:
            await status.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF-–æ—Ç—á—ë—Ç")
            return
        from aiogram.types import BufferedInputFile
        import os
        with open(pdf_path, 'rb') as f:
            await status.edit_text("‚úÖ PDF –≥–æ—Ç–æ–≤!")
            await cb.message.answer_document(
                BufferedInputFile(f.read(), filename=os.path.basename(pdf_path)),
                caption="üìÑ PDF-–≤–µ—Ä—Å–∏—è"
            )
    except Exception as e:
        log.warning("Gamma PDF button failed", error=str(e))
        await status.edit_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è PDF")


@router.callback_query(F.data == "leave_feedback")
async def leave_feedback_start(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.set_state(FeedbackState.WAITING_TEXT)
    await cb.message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")


@router.message(FeedbackState.WAITING_TEXT)
async def leave_feedback_collect(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not text:
        await msg.answer("‚ùó –û—Ç–∑—ã–≤ –ø—É—Å—Ç–æ–π. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞.")
        return
    admin_chat = str(FEEDBACK_CHAT_ID or "").strip()
    try:
        log.info("feedback:received", user_id=msg.from_user.id, has_text=bool(text), text_len=len(text))
        log.info("feedback:admin_chat_config", admin_chat_present=bool(admin_chat), admin_chat=admin_chat or None)
    except Exception:
        pass
    try:
        if admin_chat:
            user = msg.from_user
            header = f"üìù –û—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{user.id} (@{user.username or '–Ω–µ—Ç'} | {user.full_name})"
            try:
                await msg.bot.send_message(admin_chat, header)
                log.info("feedback:header_sent", admin_chat=admin_chat)
            except Exception as e:
                log.warning("feedback:header_send_failed", error=str(e), admin_chat=admin_chat)
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            try:
                await msg.forward(admin_chat)
                log.info("feedback:forward_ok", admin_chat=admin_chat)
            except Exception as e:
                log.warning("feedback:forward_failed", error=str(e), admin_chat=admin_chat)
        await msg.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
            ])
        )
    except Exception as e:
        log.warning("Feedback forward failed", error=str(e))
        await msg.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
            ])
        )
    except Exception as e:
        # –î–æ–ø. –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –∞–¥–º–∏–Ω-—á–∞—Ç –Ω–µ –∑–∞–¥–∞–Ω
        log.warning("feedback:unhandled_error", error=str(e))
        await msg.answer(
            "‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ú—ã —É–∂–µ –∑–∞–Ω–∏–º–∞–µ–º—Å—è —Ä–µ—à–µ–Ω–∏–µ–º.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
            ])
        )
    finally:
        if not admin_chat:
            try:
                await msg.answer(
                    "‚ÑπÔ∏è –û—Ç–∑—ã–≤ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω FEEDBACK_CHAT_ID.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                    ])
                )
                log.warning("feedback:admin_chat_missing")
            except Exception:
                pass
        await state.clear()


