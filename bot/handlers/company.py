# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""
import json
import tempfile
from typing import Optional

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile

from bot.states import SearchState, ReportState
from bot.keyboards.main import choose_report_kb, report_menu_kb
from services.aggregator import fetch_company_report_markdown, fetch_company_profile
from core.logger import setup_logging, get_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
log = get_logger(__name__)

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä
router = Router(name="company_fixed")

@router.callback_query(F.data == "report_free")
async def free_report(cb: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
    print("DEBUG: free_report handler called")  # –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥
    print(f"DEBUG: callback_data={cb.data}, user_id={cb.from_user.id}")  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    log.info("free_report: handler called", callback_data=cb.data, user_id=cb.from_user.id)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å timeout
    try:
        await cb.answer()
    except Exception as e:
        log.warning("Could not answer callback query", error=str(e))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    status_msg = await cb.message.answer("‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏...")
    file_sent = False
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        log.info("Getting state data", user_id=cb.from_user.id)
        data = await state.get_data()
        query = data.get("query", "")
        log.info("State data retrieved", query=query, user_id=cb.from_user.id)
        
        if not query:
            log.warning("No query in state", user_id=cb.from_user.id)
            await status_msg.edit_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
        log.info("Fetching company report using aggregator", query=query, user_id=cb.from_user.id)
        response = await fetch_company_report_markdown(query)
        log.info("Report generation completed", 
                response_length=len(response) if response else 0, 
                response_preview=response[:200] if response else None,
                user_id=cb.from_user.id)
        
        if not response or response.startswith("‚ùå"):
            log.warning("Invalid query or company not found", query=query, response=response[:200] if response else None, user_id=cb.from_user.id)
            await status_msg.edit_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù/–û–ì–†–ù")
            return
        
        log.info("Company report fetched successfully", 
                query=query,
                response_length=len(response),
                user_id=cb.from_user.id)
        
        # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–æ–ø—ã—Ç–∫–∞ —Å–¥–µ–ª–∞—Ç—å PDF —á–µ—Ä–µ–∑ Gamma Generate API
        pdf_path = None
        try:
            from settings import ENABLE_GAMMA_PDF, GAMMA_THEME
            if ENABLE_GAMMA_PDF:
                log.info("Starting Gamma PDF generation", user_id=cb.from_user.id)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ –Ω–∞—á–∞–ª–µ PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                await status_msg.edit_text("‚è≥ –§–æ—Ä–º–∏—Ä—É—é PDF-–≤–µ—Ä—Å–∏—é –æ—Ç—á—ë—Ç–∞...\n\nüìÑ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 15 –º–∏–Ω—É—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PDF.")
                import time
                start_time = time.time()
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                async def update_progress(status, elapsed, timeout):
                    minutes = int(elapsed // 60)
                    seconds = int(elapsed % 60)
                    progress_text = f"‚è≥ –§–æ—Ä–º–∏—Ä—É—é PDF-–≤–µ—Ä—Å–∏—é –æ—Ç—á—ë—Ç–∞...\n\nüìÑ –°—Ç–∞—Ç—É—Å: {status}\n‚è∞ –ü—Ä–æ—à–ª–æ: {minutes}–º {seconds}—Å\n\n‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
                    await status_msg.edit_text(progress_text)
                
                from services.export.gamma_exporter import generate_pdf_from_report_text
                pdf_path = generate_pdf_from_report_text(response, language="ru", theme_name=GAMMA_THEME or None, progress_callback=update_progress)
                end_time = time.time()
                log.info("Gamma PDF generation completed", user_id=cb.from_user.id, duration=end_time-start_time, pdf_path=pdf_path)
        except Exception as e:
            log.warning("Gamma PDF failed", error=str(e), user_id=cb.from_user.id)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DOCX –≤–º–µ—Å—Ç–æ TXT
        log.info("Generating DOCX report", user_id=cb.from_user.id)
        from docx import Document
        from docx.shared import Pt
        from docx.oxml.ns import qn
        from docx.enum.text import WD_ALIGN_PARAGRAPH

        doc = Document()
        # –ë–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å
        style = doc.styles['Normal']
        style.font.name = 'Calibri'
        style._element.rPr.rFonts.set(qn('w:eastAsia'), 'Calibri')
        style.font.size = Pt(11)

        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç—á—ë—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–±–∑–∞—Ü—ã
        for line in response.splitlines():
            if line.strip() == '':
                doc.add_paragraph('')
                continue
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π (====) –¥–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–º–∏
            if set(line.strip()) == {'='} and len(line.strip()) >= 10:
                # –≠—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç.–∫. –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                continue
            p = doc.add_paragraph()
            run = p.add_run(line)
            # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –±—ã–ª–∞ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏/–∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            if line.isupper() and len(line) < 60:
                run.bold = True

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.docx', delete=False) as tmp:
            doc.save(tmp.name)
            temp_path = tmp.name
        log.info("DOCX report saved", temp_path=temp_path, user_id=cb.from_user.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        log.info("Sending report file to user", user_id=cb.from_user.id)
        with open(temp_path, 'rb') as file:
            document = BufferedInputFile(file.read(), filename="company_report.docx")
            
            await status_msg.edit_text("‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!")
            await cb.message.answer_document(
                document,
                caption="üìä –û—Ç—á—ë—Ç –æ –∫–æ–º–ø–∞–Ω–∏–∏ (DOCX)\n\n–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏, –≤–∫–ª—é—á–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å, –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –¥–µ–ª–∞, –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≥–æ—Å–∑–∞–∫—É–ø–∫–∏."
            )
            # –ï—Å–ª–∏ –µ—Å—Ç—å PDF ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ –≤—Ç–æ—Ä—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            if pdf_path:
                with open(pdf_path, 'rb') as fpdf:
                    from aiogram.types import BufferedInputFile as BIF
                    await cb.message.answer_document(
                        BIF(fpdf.read(), filename=os.path.basename(pdf_path)),
                        caption="üìÑ PDF-–≤–µ—Ä—Å–∏—è (Gamma)"
                    )
            file_sent = True
        log.info("Report file sent successfully", user_id=cb.from_user.id)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import os
        os.unlink(temp_path)
        log.info("Temporary file deleted", temp_path=temp_path, user_id=cb.from_user.id)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞
        await state.set_state(ReportState.choose_report)
        await cb.message.answer(
            "üìä –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=choose_report_kb()
        )
        
    except Exception as e:
        log.error("Error in free_report", error=str(e), error_type=type(e).__name__, user_id=cb.from_user.id)
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–µ –∑–∞—Ç–∏—Ä–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–æ–π
        if not file_sent:
            await status_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞")


@router.callback_query(F.data == "report_pdf_gamma")
async def report_pdf_gamma(cb: CallbackQuery, state: FSMContext):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç PDF —á–µ—Ä–µ–∑ Gamma –ø–æ —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É"""
    await cb.answer()
    status = await cb.message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é PDF —á–µ—Ä–µ–∑ Gamma‚Ä¶")
    try:
        from settings import ENABLE_GAMMA_PDF, GAMMA_THEME
        if not ENABLE_GAMMA_PDF:
            await status.edit_text("‚ùå PDF —á–µ—Ä–µ–∑ Gamma –æ—Ç–∫–ª—é—á—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return
        data = await state.get_data()
        query = data.get("query", "")
        if not query:
            await status.edit_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç—á—ë—Ç–∞")
            return
        report_text = await fetch_company_report_markdown(query)
        if not report_text or report_text.startswith("‚ùå"):
            await status.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        await status.edit_text("‚è≥ –§–æ—Ä–º–∏—Ä—É—é PDF-–≤–µ—Ä—Å–∏—é –æ—Ç—á—ë—Ç–∞...\n\nüìÑ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 15 –º–∏–Ω—É—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PDF.\n\n‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        async def update_progress(status, elapsed, timeout):
            minutes = int(elapsed // 60)
            seconds = int(elapsed % 60)
            progress_text = f"‚è≥ –§–æ—Ä–º–∏—Ä—É—é PDF-–≤–µ—Ä—Å–∏—é –æ—Ç—á—ë—Ç–∞...\n\nüìÑ –°—Ç–∞—Ç—É—Å: {status}\n‚è∞ –ü—Ä–æ—à–ª–æ: {minutes}–º {seconds}—Å\n\n‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            await status.edit_text(progress_text)
        
        from services.export.gamma_exporter import generate_pdf_from_report_text
        log.info("Starting Gamma PDF generation from button", user_id=cb.from_user.id)
        import time
        start_time = time.time()
        pdf_path = generate_pdf_from_report_text(report_text, language="ru", theme_name=GAMMA_THEME or None, progress_callback=update_progress)
        end_time = time.time()
        log.info("Gamma PDF generation from button completed", user_id=cb.from_user.id, duration=end_time-start_time, pdf_path=pdf_path)
        if not pdf_path:
            await status.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF —á–µ—Ä–µ–∑ Gamma")
            return
        from aiogram.types import BufferedInputFile
        import os
        with open(pdf_path, 'rb') as f:
            await status.edit_text("‚úÖ PDF –≥–æ—Ç–æ–≤!")
            await cb.message.answer_document(
                BufferedInputFile(f.read(), filename=os.path.basename(pdf_path)),
                caption="üìÑ PDF-–≤–µ—Ä—Å–∏—è (Gamma)"
            )
    except Exception as e:
        log.warning("Gamma PDF button failed", error=str(e))
        await status.edit_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è PDF")
