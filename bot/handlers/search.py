# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
"""
import re
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from bot.keyboards.main import main_menu_kb, report_menu_kb, results_kb, choose_report_kb
from bot.states import SearchState, MenuState
from core.logger import setup_logging

router = Router(name="search")
log = setup_logging()


def _normalize_query(query: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    query = re.sub(r'\s+', ' ', query.strip())
    return query


def _is_inn(query: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –ò–ù–ù"""
    return re.match(r'^\d{10}$|^\d{12}$', query) is not None


def _is_ogrn(query: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –û–ì–†–ù"""
    return re.match(r'^\d{13}$|^\d{15}$', query) is not None


@router.callback_query(F.data == "search_inn")
async def ask_inn(cb: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ò–ù–ù/–û–ì–†–ù/–Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    await cb.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ:\n"
        "‚Ä¢ –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä)\n"
        "‚Ä¢ –û–ì–†–ù (13 –∏–ª–∏ 15 —Ü–∏—Ñ—Ä)\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
    )
    await state.set_state(SearchState.ASK_INN)
    await cb.answer()


@router.message(SearchState.ASK_INN)
async def got_query(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    query = _normalize_query(msg.text or "")
    
    if len(query) < 2:
        await msg.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(query=query)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
    if _is_inn(query):
        query_type = "–ò–ù–ù"
    elif _is_ogrn(query):
        query_type = "–û–ì–†–ù"
    else:
        query_type = "–Ω–∞–∑–≤–∞–Ω–∏–µ"
    
    await msg.answer(f"üîç –ò—â—É –ø–æ {query_type}: {query}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞
    await msg.answer(
        "‚úÖ –ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
        reply_markup=choose_report_kb()
    )
    await state.set_state(SearchState.SELECT)


@router.callback_query(F.data == "search_name")
async def ask_name(cb: CallbackQuery, state: FSMContext):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
    await state.set_state(SearchState.ASK_NAME)
    await cb.answer()


@router.message(SearchState.ASK_NAME)
async def got_name(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    query = _normalize_query(msg.text or "")
    
    if len(query) < 2:
        await msg.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(query=query)
    
    await msg.answer(f"üîç –ò—â—É: {query}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞
    await msg.answer(
        "‚úÖ –ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
        reply_markup=choose_report_kb()
    )
    await state.set_state(SearchState.SELECT)


async def show_page(msg_or_cbmsg, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)"""
    # –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ø–æ–∏—Å–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
    # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    await msg_or_cbmsg.answer(
        "‚ÑπÔ∏è –í –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–∏—Å–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ç—á—ë—Ç–∞."
    )


@router.callback_query(F.data.startswith("page:"))
async def page_nav(cb: CallbackQuery, state: FSMContext):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)"""
    await cb.answer("‚ÑπÔ∏è –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏")


@router.message(SearchState.PAGING)
async def select_by_number(msg: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ –Ω–æ–º–µ—Ä—É (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)"""
    await msg.answer("‚ÑπÔ∏è –í –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç—á—ë—Ç–∞")


@router.callback_query(F.data == "noop")
async def noop(cb: CallbackQuery, state: FSMContext):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    await cb.answer()