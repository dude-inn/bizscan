# -*- coding: utf-8 -*-
from typing import Literal, Optional
from domain.models import CompanyFull
from settings import BRAND_NAME, BRAND_LINK, DATE_FORMAT
from core.logger import setup_logging
from datetime import datetime
from pathlib import Path
from fpdf import FPDF
from fpdf.errors import FPDFUnicodeEncodingException
import re

log = setup_logging()

# –ö–∞—Ä—Ç–∞ —Å–µ–º–µ–π—Å—Ç–≤–∞/—Å—Ç–∏–ª—è –≤ –∏–º—è —Ñ–∞–π–ª–∞
FONT_FILES = {
    ("DejaVu", ""): "DejaVuSansCondensed.ttf",
    ("DejaVu", "B"): "DejaVuSansCondensed-Bold.ttf",
    # ("DejaVu", "I"): "DejaVuSansCondensed-Oblique.ttf",  # –ø–æ–¥–∫–ª—é—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å
}


def _find_font_file(filename: str) -> Path:
    here = Path(__file__).resolve().parent
    candidates = [
        Path.cwd() / "assets" / "fonts" / filename,
        here / "assets" / "fonts" / filename,
        here / "fonts" / filename,
        here.parent / "assets" / "fonts" / filename,
    ]
    for p in candidates:
        if p.exists():
            return p
    raise FileNotFoundError(
        f"Font not found: {filename}; tried: {[str(c) for c in candidates]}"
    )


def _ensure_fonts(pdf: "FPDF") -> None:
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à—Ä–∏—Ñ—Ç—ã DejaVu
    registered = []
    for (family, style), fn in FONT_FILES.items():
        path = _find_font_file(fn)
        try:
            pdf.add_font(family, style, str(path), uni=True)
            registered.append(fn)
        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            pass
    if registered:
        log.info("PDF: fonts registered", fonts=registered)


def _set_font(pdf: "FPDF", style: str = "", size: int = 12) -> None:
    _ensure_fonts(pdf)
    # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—É—Ä—Å–∏–≤, –µ—Å–ª–∏ Oblique-ttf –Ω–µ –≤–∫–ª—é—á—ë–Ω –≤ FONT_FILES
    style = "B" if style == "B" else ""
    pdf.set_font("DejaVu", style, size)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ –º–µ—Ç–∫–∏ –∏
# –∞–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑ –æ–±—Ä–µ–∑–∞–Ω–∏–π/–Ω–∞–ª–æ–∂–µ–Ω–∏–π
def row(pdf: "FPDF", label: str, value: Optional[str], *, label_w: int = 55, lh: int = 6) -> None:
    value = value or "‚Äî"
    # effective page width
    epw = getattr(pdf, "epw", pdf.w - pdf.l_margin - pdf.r_margin)
    v_w = epw - label_w
    x, y = pdf.get_x(), pdf.get_y()

    # –°—á–∏—Ç–∞–µ–º –≤—ã—Å–æ—Ç—É –±–ª–æ–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–æ–∫ –∑–Ω–∞—á–µ–Ω–∏—è
    lines = pdf.multi_cell(v_w, lh, value, split_only=True)
    h = max(lh, lh * len(lines))

    # –ú–µ—Ç–∫–∞ (–∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é –≤—ã—Å–æ—Ç—É –±–ª–æ–∫–∞)
    pdf.set_xy(x, y)
    pdf.multi_cell(label_w, h, txt=label, border=0, align="L", new_x="RIGHT", new_y="TOP")

    # –ó–Ω–∞—á–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    pdf.set_xy(x + label_w, y)
    pdf.multi_cell(v_w, lh, txt=value, border=0, align="L", new_x="LMARGIN", new_y="NEXT")


def section(pdf: "FPDF", title: str) -> None:
    pdf.ln(2)
    _set_font(pdf, "B", 12)
    pdf.cell(0, 8, title, ln=1)
    _set_font(pdf, "", 11)


def lock(msg: str = "üîí –î–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–ª–∞—Ç–Ω–æ–º –æ—Ç—á—ë—Ç–µ") -> str:
    return msg


def ensure_space(pdf: "FPDF", min_remaining: int = 30) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –º–µ—Å—Ç–∞."""
    bottom_margin = getattr(pdf, 'b_margin', 15)
    if (pdf.h - bottom_margin - pdf.get_y()) < min_remaining:
        pdf.add_page()

class PDFReport(FPDF):
    def __init__(self):
        super().__init__()
        self.set_auto_page_break(auto=True, margin=15)
        # –°—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–±–∞–≤–∏–º —Å—Ä–∞–∑—É; —à—Ä–∏—Ñ—Ç –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤–∞–º–∏ _set_font –≤ –º–µ—Ç–æ–¥–∞—Ö
        self.add_page()
        
    def header(self):
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        _set_font(self, 'B', 16)
        self.set_text_color(37, 99, 235)  # –°–∏–Ω–∏–π —Ü–≤–µ—Ç
        self.cell(0, 10, BRAND_NAME, 0, 1, 'C')
        
        # –õ–∏–Ω–∏—è –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        self.set_draw_color(37, 99, 235)
        self.line(20, 25, 190, 25)
        
        self.ln(10)
    
    def footer(self):
        self.set_y(-15)
        # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—É—Ä—Å–∏–≤, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å Oblique-ttf
        _set_font(self, '', 8)
        self.set_text_color(128, 128, 128)
        footer_text = f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.page_no()}'
        self.cell(0, 10, footer_text, 0, 0, 'C')
    
    def add_section_title(self, title: str, emoji: str = ""):
        self.ln(5)
        _set_font(self, 'B', 14)
        self.set_text_color(30, 64, 175)  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
        title_text = title
        self.cell(0, 8, title_text, 0, 1)
        self.ln(2)
    
    def add_field(self, label: str, value: str):
        if not value:
            return
        
        label_text = label
        value_text = value
        
        _set_font(self, 'B', 10)
        self.set_text_color(55, 65, 81)  # –°–µ—Ä—ã–π
        self.cell(40, 6, f"{label_text}:", 0, 0)
        
        _set_font(self, '', 10)
        self.set_text_color(0, 0, 0)  # –ß–µ—Ä–Ω—ã–π
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if len(value_text) > 50:
            self.cell(0, 6, value_text[:47] + "...", 0, 1)
        else:
            self.cell(0, 6, value_text, 0, 1)
    
    def add_locked_field(self, text: str):
        _set_font(self, '', 9)
        self.set_text_color(156, 163, 175)  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
        self.cell(0, 5, f"[–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û] {text}", 0, 1)

def sanitize_text(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è PDF –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É"""
    if not text:
        return ""
    
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = str(text)
    text = text.replace('‚Ññ', 'N')  # –ó–∞–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª –Ω–æ–º–µ—Ä–∞
    text = text.replace('"', '"').replace('"', '"')  # –ó–∞–º–µ–Ω—è–µ–º –∫–∞–≤—ã—á–∫–∏
    text = text.replace('‚Äî', '-').replace('‚Äì', '-')  # –ó–∞–º–µ–Ω—è–µ–º —Ç–∏—Ä–µ
    text = text.replace('‚Ä¶', '...')  # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
    
    # –°–ª–æ–≤–∞—Ä—å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
    translit_dict = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'Yo',
        '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
        '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
        '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch',
        '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
    }
    
    # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É
    result = ""
    for char in text:
        if char in translit_dict:
            result += translit_dict[char]
        elif char.isalnum() or char in ' .,:;()"/\\-':
            result += char
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (—ç–º–æ–¥–∑–∏ –∏ —Ç.–¥.)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    result = re.sub(r'\s+', ' ', result).strip()
    return result

def generate_pdf(company: CompanyFull, mode: Literal["free", "full"]) -> bytes:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –æ—Ç—á–µ—Ç –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è fpdf2
    """
    log.info("PDF start", mode=mode, company_name=company.short_name)
    log.debug("PDF: company data", 
              inn=company.inn, 
              ogrn=company.ogrn, 
              has_contacts=bool(company.contacts),
              finance_count=len(company.finance),
              founders_count=len(company.founders))
    
    pdf = PDFReport()
    # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —à—Ä–∏—Ñ—Ç–æ–≤ —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –ø—Ä–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–¥–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–∑—ã–≤–∞—é—â–µ–º—É –∫–æ–¥—É
    _set_font(pdf, 'B', 20)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
    _set_font(pdf, 'B', 20)
    pdf.set_text_color(30, 64, 175)
    title = f"{BRAND_NAME}: {'–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π' if mode == 'free' else '–ü–æ–ª–Ω—ã–π'} –æ—Ç—á—ë—Ç"
    pdf.cell(0, 15, title, 0, 1, 'C')
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
    pdf.add_section_title("–ö–∞—Ä—Ç–æ—á–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏", "")
    
    pdf.add_field("–ù–∞–∑–≤–∞–Ω–∏–µ", company.short_name)
    if company.full_name and company.full_name != company.short_name:
        pdf.add_field("–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", company.full_name)
    row(pdf, "–ò–ù–ù:", company.inn)
    row(pdf, "–û–ì–†–ù:", company.ogrn)
    if company.ogrn_date:
        row(pdf, "–î–∞—Ç–∞ –û–ì–†–ù:", company.ogrn_date)
    row(pdf, "–ö–ü–ü:", getattr(company, "kpp", None))
    row(pdf, "–°—Ç–∞—Ç—É—Å:", company.status)
    row(pdf, "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", company.reg_date)
    row(pdf, "–ê–¥—Ä–µ—Å:", company.address)
    row(pdf, "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:", company.director)
    
    # –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if company.okved_main or company.okved_additional:
        pdf.add_section_title("–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "")
        # –û—Å–Ω–æ–≤–Ω–æ–π –û–ö–í–≠–î: –∫–æ–¥ ‚Äî –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        okved_code, okved_title = None, None
        try:
            ok_main_detail = getattr(company, "okveds", {}).get("main_detail")
            if ok_main_detail and isinstance(ok_main_detail, (list, tuple)):
                okved_code, okved_title = ok_main_detail[0], ok_main_detail[1]
        except Exception:
            pass
        if not okved_code and company.okved_main:
            okved_code = company.okved_main
        okved_line = f"{okved_code or ''} ‚Äî {okved_title or ''}".strip().strip("‚Äî").strip()
        row(pdf, "–û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:", okved_line or company.okved_main)
        
        if company.okved_additional:
            if mode == "free":
                pdf.add_locked_field(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥—ã: {len(company.okved_additional)} —à—Ç. ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–ª–∞—Ç–Ω–æ–º –æ—Ç—á—ë—Ç–µ")
            else:
                _set_font(pdf, 'B', 10)
                pdf.cell(0, 6, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:", 0, 1)
                for okved in company.okved_additional[:10]:
                    _set_font(pdf, '', 9)
                    pdf.cell(0, 5, f"‚Ä¢ {okved}", 0, 1)
                if len(company.okved_additional) > 10:
                    pdf.cell(0, 5, f"... –∏ –µ—â–µ {len(company.okved_additional) - 10}", 0, 1)
    
    # –†–µ–∫–≤–∏–∑–∏—Ç—ã
    if company.msp_status or company.tax_authority or company.stats_codes:
        pdf.add_section_title("–†–µ–∫–≤–∏–∑–∏—Ç—ã", "")
        pdf.add_field("–ú–°–ü-—Å—Ç–∞—Ç—É—Å", company.msp_status)
        pdf.add_field("–ù–∞–ª–æ–≥–æ–≤—ã–π –æ—Ä–≥–∞–Ω", company.tax_authority)
        
    if company.stats_codes:
            if mode == "free":
                pdf.add_locked_field(f"–ö–æ–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {len(company.stats_codes)} —à—Ç. ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–ª–∞—Ç–Ω–æ–º –æ—Ç—á—ë—Ç–µ")
            else:
                _set_font(pdf, 'B', 10)
                pdf.cell(0, 6, "–ö–æ–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", 0, 1)
                for code, value in company.stats_codes.items():
                    _set_font(pdf, '', 9)
                    pdf.cell(0, 5, f"‚Ä¢ {code}: {value}", 0, 1)
    
    # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    if company.contacts:
        pdf.add_section_title("–ö–æ–Ω—Ç–∞–∫—Ç—ã", "")
        for contact_type, values in company.contacts.items():
            if values:
                if mode == "free":
                    pdf.add_locked_field(f"{contact_type.title()}: {len(values)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–ª–∞—Ç–Ω–æ–º –æ—Ç—á—ë—Ç–µ")
                else:
                    _set_font(pdf, 'B', 10)
                    pdf.cell(0, 6, f"{contact_type.title()}:", 0, 1)
                    for value in values:
                        _set_font(pdf, '', 9)
                        pdf.cell(0, 5, f"‚Ä¢ {value}", 0, 1)

    # –°–≤—è–∑–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –≤–æ FULL): –∞–≥—Ä–µ–≥–∞—Ç—ã
    if mode == "full":
        pdf.add_section_title("–°–≤—è–∑–∏", "")
        founders_count = len(getattr(company, 'founders', []) or [])
        directors = getattr(company, 'director', None)
        row(pdf, "–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏:", f"{founders_count} —à—Ç.")
        row(pdf, "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:", directors)
    
    # –§–∏–Ω–∞–Ω—Å—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –≤–æ FULL, –ª–∏–º–∏—Ç 5 –ª–µ—Ç)
    if company.finance:
        pdf.add_section_title("–§–∏–Ω–∞–Ω—Å—ã", "")
        if mode == "free":
            pdf.add_locked_field(f"–î–∞–Ω–Ω—ã–µ –∑–∞ {len(company.finance)} –ª–µ—Ç ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–ª–∞—Ç–Ω–æ–º –æ—Ç—á—ë—Ç–µ")
        else:
            _set_font(pdf, 'B', 10)
            pdf.cell(30, 6, "–ì–æ–¥", 1, 0, 'C')
            pdf.cell(40, 6, "–í—ã—Ä—É—á–∫–∞", 1, 0, 'C')
            pdf.cell(40, 6, "–ü—Ä–∏–±—ã–ª—å", 1, 0, 'C')
            pdf.cell(40, 6, "–ê–∫—Ç–∏–≤—ã", 1, 0, 'C')
            pdf.cell(40, 6, "–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", 1, 1, 'C')
            years_sorted = sorted(company.finance, key=lambda x: x.year, reverse=True)[:5]
            for fy in years_sorted:
                _set_font(pdf, '', 9)
                pdf.cell(30, 6, str(fy.year), 1, 0, 'C')
                pdf.cell(40, 6, fy.revenue or '-', 1, 0, 'C')
                pdf.cell(40, 6, fy.profit or '-', 1, 0, 'C')
                pdf.cell(40, 6, fy.assets or '-', 1, 0, 'C')
                pdf.cell(40, 6, fy.liabilities or '-', 1, 1, 'C')
            if len(company.finance) > 5:
                _set_font(pdf, '', 9)
                pdf.cell(0, 6, f"‚Ä¶ –∏ –µ—â—ë {len(company.finance) - 5} –ª–µ—Ç", 0, 1)
    
    # –ü—Ä–∞–≤–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    if company.flags:
        pdf.add_section_title("–ü—Ä–∞–≤–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã", "")
        if mode == "free":
            flag_count = len([f for f in company.flags.__dict__.values() if f is not None])
            pdf.add_locked_field(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {flag_count} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–ª–∞—Ç–Ω–æ–º –æ—Ç—á—ë—Ç–µ")
        else:
            flags = []
            if company.flags.arbitration: flags.append("–∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –¥–µ–ª–∞")
            if company.flags.bankruptcy: flags.append("–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ")
            if company.flags.exec_proceedings: flags.append("–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
            if company.flags.inspections: flags.append("–ø—Ä–æ–≤–µ—Ä–∫–∏")
            if company.flags.mass_director: flags.append("–º–∞—Å—Å–æ–≤—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å")
            if company.flags.mass_founder: flags.append("–º–∞—Å—Å–æ–≤—ã–π —É—á—Ä–µ–¥–∏—Ç–µ–ª—å")
            if company.flags.unreliable_address: flags.append("–Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞")
            if company.flags.unreliable_director: flags.append("–Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
            if company.flags.unreliable_founder: flags.append("–Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å —É—á—Ä–µ–¥–∏—Ç–µ–ª—è")
            if company.flags.tax_debt: flags.append("–Ω–∞–ª–æ–≥–æ–≤–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å")
            if company.flags.disqualified: flags.append("–¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏—Ü–∞")
            if company.flags.unreliable_supplier: flags.append("–Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏")
            
            if flags:
                for flag in flags:
                    _set_font(pdf, '', 9)
                    pdf.cell(0, 5, f"[!] {flag}", 0, 1)
            else:
                _set_font(pdf, '', 10)
                pdf.set_text_color(16, 185, 129)  # –ó–µ–ª–µ–Ω—ã–π
                pdf.cell(0, 6, "[OK] –ü—Ä–∞–≤–æ–≤—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", 0, 1)
    
    # –°—É–¥—ã –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (FULL)
    if mode == "full":
        ensure_space(pdf)
        pdf.add_section_title("–°—É–¥—ã –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞", "")
        # –ó–∞–≥–ª—É—à–∫–∞: –≤—ã–≤–æ–¥–∏–º —Å—á—ë—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–æ flags/extra
        try:
            extra = getattr(company, 'extra', {}) or {}
            courts = extra.get('courts', {})
            execs = extra.get('executions', {})
            row(pdf, "–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –¥–µ–ª–∞:", str(courts.get('count', '‚Äî')))
            row(pdf, "–ò—Å–ø. –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:", str(execs.get('count', '‚Äî')))
        except Exception:
            pass
    
    # –£—á—Ä–µ–¥–∏—Ç–µ–ª–∏
    if company.founders:
        pdf.add_section_title("–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏", "")
        if mode == "free":
            pdf.add_locked_field(f"–ù–∞–π–¥–µ–Ω–æ {len(company.founders)} —É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–ª–∞—Ç–Ω–æ–º –æ—Ç—á—ë—Ç–µ")
        else:
            for founder in company.founders:
                founder_info = founder.name
                if founder.share:
                    founder_info += f" (–¥–æ–ª—è: {founder.share})"
                _set_font(pdf, '', 9)
                pdf.cell(0, 5, f"‚Ä¢ {founder_info}", 0, 1)
    
    # –õ–∏—Ü–µ–Ω–∑–∏–∏
    if company.licenses:
        pdf.add_section_title("–õ–∏—Ü–µ–Ω–∑–∏–∏", "üìú")
        if mode == "free":
            pdf.add_locked_field(f"–ù–∞–π–¥–µ–Ω–æ {len(company.licenses)} –ª–∏—Ü–µ–Ω–∑–∏–π ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–ª–∞—Ç–Ω–æ–º –æ—Ç—á—ë—Ç–µ")
        else:
            for license in company.licenses:
                license_info = license.type
                if license.number:
                    license_info += f" (‚Ññ {license.number})"
                if license.date:
                    license_info += f" –æ—Ç {license.date}"
                if license.authority:
                    license_info += f" ({license.authority})"
                _set_font(pdf, '', 9)
                pdf.cell(0, 5, f"‚Ä¢ {license_info}", 0, 1)
    
    # –ì–æ—Å–∑–∞–∫—É–ø–∫–∏ / –ü—Ä–æ–≤–µ—Ä–∫–∏ / –ò—Å—Ç–æ—Ä–∏—è (FULL)
    if mode == "full":
        ensure_space(pdf)
        pdf.add_section_title("–ì–æ—Å–∑–∞–∫—É–ø–∫–∏", "")
        try:
            extra = getattr(company, 'extra', {}) or {}
            proc = extra.get('procurements', {})
            row(pdf, "–í—Å–µ–≥–æ –∑–∞–∫—É–ø–æ–∫:", str(proc.get('count', '‚Äî')))
            row(pdf, "–°—É–º–º–∞:", str(proc.get('sum', '‚Äî')))
        except Exception:
            pass
        ensure_space(pdf)
        pdf.add_section_title("–ü—Ä–æ–≤–µ—Ä–∫–∏", "")
        try:
            checks = extra.get('checks', {})
            row(pdf, "–í—Å–µ–≥–æ:", str(checks.get('total', '‚Äî')))
            row(pdf, "–° –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏:", str(checks.get('with_violations', '‚Äî')))
        except Exception:
            pass
        ensure_space(pdf)
        pdf.add_section_title("–ò—Å—Ç–æ—Ä–∏—è", "")
        try:
            events = extra.get('events', {})
            recent = events.get('recent', [])[:5]
            for ev in recent:
                _set_font(pdf, '', 9)
                pdf.cell(0, 5, f"‚Ä¢ {ev}", 0, 1)
        except Exception:
            pass

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–∑–æ—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã (free: —Ç–æ–ª—å–∫–æ –∑–∞–º–∫–∏)
    if mode == "free":
        pdf.add_section_title("–°—É–¥—ã", "")
        pdf.add_locked_field(lock())
        pdf.add_section_title("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞", "")
        pdf.add_locked_field(lock())
        pdf.add_section_title("–ì–æ—Å–∑–∞–∫—É–ø–∫–∏", "")
        pdf.add_locked_field(lock())
        pdf.add_section_title("–ü—Ä–æ–≤–µ—Ä–∫–∏", "")
        pdf.add_locked_field(lock())
        pdf.add_section_title("–°–≤—è–∑–∏", "")
        pdf.add_locked_field(lock())
        pdf.add_section_title("–¢–æ–≤–∞—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏", "")
        pdf.add_locked_field(lock())
    
    # –ü–æ–¥–ø–∏—Å—å
    pdf.ln(10)
    _set_font(pdf, '', 10)
    pdf.set_text_color(107, 114, 128)  # –°–µ—Ä—ã–π
    pdf.cell(0, 6, f"–ü–æ–¥–ø–∏—Å—å: {BRAND_LINK}", 0, 1, 'C')
    pdf.cell(0, 6, f"–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime(DATE_FORMAT)}", 0, 1, 'C')
    
    try:
        log.debug("PDF output", mode=mode, company_name=company.short_name)
        pdf_bytes = pdf.output(dest="S")
        log.info("PDF generated", mode=mode, company_name=company.short_name, size=len(pdf_bytes))
        return pdf_bytes
    except (FPDFUnicodeEncodingException, FileNotFoundError) as e:
        # –Ø–≤–Ω–æ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ —à—Ä–∏—Ñ—Ç—ã/—é–Ω–∏–∫–æ–¥
        log.warning(
            "PDF failed; ensure DejaVu fonts in assets/fonts (see README).",
            mode=mode,
            company_name=company.short_name,
            exc_info=e,
        )
        raise
    except Exception as e:
        log.warning("PDF failed", mode=mode, company_name=company.short_name, exc_info=e)
        raise
