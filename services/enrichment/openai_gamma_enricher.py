# -*- coding: utf-8 -*-
"""
OpenAI-powered Gamma.app section generator for company enrichment
"""
from __future__ import annotations
import os
from typing import Any, Dict, List, Optional
from openai import OpenAI

DEFAULT_MODEL = os.getenv("OPENAI_MODEL_GAMMA", "gpt-4o-mini")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import logging
log = logging.getLogger(__name__)

def _log_openai_status():
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å OpenAI API"""
    api_key = os.getenv("OPENAI_API_KEY", "")
    log.info("=== OpenAI API Status ===")
    log.info(f"OpenAI API Key: {'‚úÖ Set' if api_key else '‚ùå Not set'}")
    log.info(f"Model: {DEFAULT_MODEL}")
    if not api_key:
        log.warning("‚ö†Ô∏è OpenAI API key not set - Gamma enrichment will be disabled")

# –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
_log_openai_status()

SYSTEM_PROMPT = """\
–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫. –ù–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤—ã—Ö —Ä–µ–µ—Å—Ç—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≤–µ–±-—Å–Ω–∏–ø–ø–µ—Ç–æ–≤
—Å–æ–±–µ—Ä–∏ –±–ª–æ–∫ –¥–ª—è Gamma.app:
‚Äî –∞–±–∑–∞—Ü: –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ (–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —Ä—ã–Ω–æ–∫/–ø—Ä–æ–¥—É–∫—Ç—ã).
‚Äî —Å–ø–∏—Å–æ–∫ 3‚Äì6 —Ñ–∞–∫—Ç–æ–≤ (–Ω–æ–≤–æ—Å—Ç–∏, –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, –º–æ—â–Ω–æ—Å—Ç–∏, —ç–∫—Å–ø–æ—Ä—Ç, —É—á–∞—Å—Ç–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞).
‚Äî —Å—Ç—Ä–æ–∫–∞ "–ò—Å—Ç–æ—á–Ω–∏–∫–∏": 3‚Äì6 URL.
–¢–æ–Ω –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π; –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–Ω–∏–ø–ø–µ—Ç—ã/–¥–∞–Ω–Ω—ã–µ.
"""

def build_user_prompt(company: Dict[str, Any], snippets: List[Dict[str, Any]]) -> str:
    name = company.get("name_full") or company.get("name") or ""
    inn = company.get("inn") or ""
    ogrn = company.get("ogrn") or ""
    okved = company.get("okved") or ""
    city = (company.get("address") or "").split(",")[0] if company.get("address") else ""
    header = f"{name} (–ò–ù–ù {inn}, –û–ì–†–ù {ogrn})"
    if okved:
        header += f"; –û–ö–í–≠–î: {okved}"
    if city:
        header += f"; –ª–æ–∫–∞—Ü–∏—è: {city}"
    lines = [header, "", "### –°–Ω–∏–ø–ø–µ—Ç—ã"]
    for s in snippets:
        url = s.get("url", "")
        title = s.get("title", "") or url
        snippet = s.get("snippet", "")
        if snippet and len(snippet) > 400:
            snippet = snippet[:397] + "‚Ä¶"
        lines.append(f"- {title}\n  {snippet}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {url}")
    return "\n".join(lines)

def generate_gamma_section(company: Dict[str, Any], snippets: List[Dict[str, Any]], *, model: Optional[str] = None) -> str:
    log.info(f"ü§ñ Generating Gamma section for: {company.get('name_full', 'Unknown')}")
    log.info(f"üìä Snippets available: {len(snippets)}")
    
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        log.warning("‚ùå OpenAI API key not set, using fallback")
        # fallback
        parts = [f"**{company.get('name_full') or company.get('name') or '–ö–æ–º–ø–∞–Ω–∏—è'}**"]
        parts.append("_–î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏._")
        if snippets:
            urls = [s.get("url", "") for s in snippets if s.get("url")]
            parts.append("**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** " + ", ".join(set(urls)))
        return "\n\n".join(parts)
    
    try:
        log.info("üîß Initializing OpenAI client")
        client = OpenAI(api_key=api_key)
        mdl = model or DEFAULT_MODEL
        log.info(f"üìù Building prompt for model: {mdl}")
        
        user_prompt = build_user_prompt(company, snippets)
        log.info(f"üìè Prompt length: {len(user_prompt)} characters")
        
        log.info("üöÄ Sending request to OpenAI")
        resp = client.chat.completions.create(
            model=mdl,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.2,
            max_tokens=700,
        )
        
        result = resp.choices[0].message.content.strip()
        log.info(f"‚úÖ OpenAI response received: {len(result)} characters")
        return result
        
    except Exception as e:
        log.error(f"‚ùå OpenAI generation failed: {e}")
        # Fallback to simple format
        parts = [f"**{company.get('name_full') or company.get('name') or '–ö–æ–º–ø–∞–Ω–∏—è'}**"]
        parts.append(f"_–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}_")
        if snippets:
            urls = [s.get("url", "") for s in snippets if s.get("url")]
            parts.append("**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** " + ", ".join(set(urls)))
        return "\n\n".join(parts)
