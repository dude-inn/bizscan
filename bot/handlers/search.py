# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
"""
import re
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from bot.keyboards.main import main_menu_kb, report_menu_kb, results_kb, choose_report_kb
from bot.states import SearchState, MenuState
from core.logger import setup_logging
from services.providers.ofdata import OFDataClient, OFDataClientError, OFDataServerTemporaryError
from services.aggregator import fetch_company_report_markdown
# Name-based search and DN suggestions are disabled by plan
router = Router(name="search")
log = setup_logging()
def _normalize_query(query: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    query = re.sub(r'\s+', ' ', query.strip())
    return query
def _is_inn(query: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –ò–ù–ù"""
    return re.match(r'^\d{10}$|^\d{12}$', query) is not None
def _is_ogrn(query: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –û–ì–†–ù"""
    return re.match(r'^\d{13}$|^\d{15}$', query) is not None
@router.callback_query(F.data == "search_inn")
async def ask_inn(cb: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ò–ù–ù/–û–ì–†–ù –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    await state.update_data(search_type="inn", gamma_export_as=None)
    await cb.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä) –∏–ª–∏ –û–ì–†–ù (13 –∏–ª–∏ 15 —Ü–∏—Ñ—Ä)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")]
        ]),
        disable_web_page_preview=True,
    )
    await state.set_state(SearchState.ASK_INN)
    await cb.answer()
@router.callback_query(F.data == "search_name")
async def ask_name(cb: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    await state.update_data(search_type="name", gamma_export_as=None)
    await cb.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")]
        ]),
        disable_web_page_preview=True,
    )
    await state.set_state(SearchState.ASK_NAME)
    await cb.answer()
async def _show_company_choices(message_or_cb, companies: list, state: FSMContext, page: int = 0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    log.info("_show_company_choices: starting", 
            companies_type=type(companies).__name__,
            companies_length=len(companies) if hasattr(companies, '__len__') else 'no length',
            page=page,
            companies_preview=str(companies)[:200] if companies else 'empty')
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ companies - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
    if not isinstance(companies, list):
        log.error("_show_company_choices: companies is not a list", 
                 companies_type=type(companies).__name__,
                 companies_value=str(companies)[:500])
        await message_or_cb.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.")
        return
    if not companies:
        await message_or_cb.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
                                   reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                       [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_search")],
                                       [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                                   ]))
        return
    # –ï—Å–ª–∏ –æ–¥–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è ‚Äî —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    if len(companies) == 1:
        company = companies[0]
        inn = company.get("inn") or company.get("–ò–ù–ù") or company.get("tax_number")
        if not inn:
            await message_or_cb.answer("‚ùå –£ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ò–ù–ù.")
            return
        company_name = (
            company.get("–ù–∞–∏–º–ü–æ–ª–Ω")
            or company.get("name_full")
            or company.get("full_name")
            or company.get("name")
            or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        )
        await state.update_data(
            query=inn,
            company_name=company_name,
            company_inn=inn,
            company_address=company.get("address"),
        )
        lines_to_send = [
            f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {company_name}",
            f"–ò–ù–ù: {inn}",
            "",
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞:",
        ]
        await message_or_cb.answer(
            "\n".join(lines_to_send),
            reply_markup=choose_report_kb()
        )
        await state.set_state(SearchState.SELECT)
        return
    # –ù–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    buttons = []
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        items_per_page = 8  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 8 –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        total_pages = (len(companies) + items_per_page - 1) // items_per_page
        start_idx = page * items_per_page
        end_idx = start_idx + items_per_page
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        try:
            companies_to_show = companies[start_idx:end_idx]
        except TypeError as e:
            log.error("_show_company_choices: slice error", 
                     error=str(e),
                     companies_type=type(companies).__name__,
                     companies_value=str(companies)[:200])
            await message_or_cb.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.")
            return
        log.info("_show_company_choices: pagination info", 
                total_companies=len(companies),
                current_page=page,
                total_pages=total_pages,
                items_per_page=items_per_page,
                start_idx=start_idx,
                end_idx=end_idx,
                companies_to_show_count=len(companies_to_show))
        for i, c in enumerate(companies_to_show):
            log.info("_show_company_choices: processing company", 
                    index=i,
                    company_type=type(c).__name__,
                    company_keys=list(c.keys()) if isinstance(c, dict) else 'not dict',
                    company_preview=str(c)[:100])
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ c - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
            if not isinstance(c, dict):
                log.warning("_show_company_choices: company item is not dict", 
                           company_type=type(c).__name__,
                           company_value=str(c)[:100])
                continue
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
            inn = c.get("inn") or c.get("–ò–ù–ù") or c.get("tax_number") or "‚Äî"
            name_short = c.get("–ù–∞–∏–º–°–æ–∫—Ä") or c.get("name_short") or c.get("short_name")
            name_full = c.get("–ù–∞–∏–º–ü–æ–ª–Ω") or c.get("name_full") or c.get("full_name") or c.get("name")
            title = name_short or name_full or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å —á–∏—Ç–∞–µ–º–æ–π
            max_title_len = 40
            if len(title) > max_title_len:
                title = title[:max_title_len - 1] + "‚Ä¶"
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∞–¥—Ä–µ—Å–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            city = None
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ–¥/–ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç
            addr_obj = (
                c.get("–Æ—Ä–ê–¥—Ä–µ—Å")
                or c.get("–ê–¥—Ä–µ—Å")
                or c.get("–ê–¥—Ä–µ—Å–†–§")
                or c.get("address")
                or c.get("full_address")
                or c.get("value")
                or {}
            )
            def _first_part(s: str) -> str:
                parts = [p.strip() for p in s.split(",") if p.strip()]
                return parts[0] if parts else s.strip()
            if isinstance(addr_obj, dict):
                city = (
                    addr_obj.get("–ù–∞—Å–ü—É–Ω–∫—Ç")
                    or addr_obj.get("city")
                    or ( _first_part(addr_obj.get("–ê–¥—Ä–µ—Å–†–§") or "") if addr_obj.get("–ê–¥—Ä–µ—Å–†–§") else None )
                    or ( _first_part(addr_obj.get("value") or "") if addr_obj.get("value") else None )
                    or ( _first_part(addr_obj.get("full_address") or "") if addr_obj.get("full_address") else None )
                    or ( _first_part(addr_obj.get("address") or "") if addr_obj.get("address") else None )
                )
            elif isinstance(addr_obj, str):
                city = _first_part(addr_obj)
            short_city = city or ""
            log.info("_show_company_choices: company processed", 
                    index=i,
                    inn=inn,
                    title=title,
                    city=short_city or None,
                    button_text=(f"{title} ‚Äî –ò–ù–ù {inn}" + (f", {short_city}" if short_city else "")))
            # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞: –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî –ò–ù–ù NNNNNNNNNN
            main_btn = InlineKeyboardButton(text=f"{title} ‚Äî –ò–ù–ù {inn}", callback_data=f"select_company:{inn}")
            buttons.append([main_btn])
    except Exception as e:
        log.error("_show_company_choices: error processing companies", error=str(e))
        await message_or_cb.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.")
        return
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    if total_pages > 1:
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"page:{page-1}"))
        nav_buttons.append(InlineKeyboardButton(text=f"üìÑ {page+1}/{total_pages}", callback_data="noop"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"page:{page+1}"))
        if nav_buttons:
            buttons.append(nav_buttons)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_search")])
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")])
    log.info("_show_company_choices: sending response", 
            buttons_count=len(buttons),
            total_pages=total_pages,
            current_page=page,
            buttons_preview=[btn[0].text for btn in buttons[:3]])
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ
    if hasattr(message_or_cb, 'edit_text'):
        # –≠—Ç–æ CallbackQuery - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        log.info("_show_company_choices: editing message", 
                message_type="CallbackQuery",
                page=page,
                total_pages=total_pages)
        await message_or_cb.edit_text(
            f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(companies)} –∫–æ–º–ø–∞–Ω–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é (—Å—Ç—Ä. {page+1}/{total_pages}):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    else:
        # –≠—Ç–æ Message - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        log.info("_show_company_choices: sending new message", 
                message_type="Message",
                page=page,
                total_pages=total_pages)
        await message_or_cb.answer(
            f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(companies)} –∫–æ–º–ø–∞–Ω–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é (—Å—Ç—Ä. {page+1}/{total_pages}):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    await state.set_state(SearchState.PAGING)
@router.message(SearchState.ASK_NAME)
async def got_name_query(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏"""
    log.info("got_name_query: starting", user_id=msg.from_user.id)
    query = _normalize_query(msg.text or "")
    log.info("got_name_query: query normalized", query=query, user_id=msg.from_user.id)
    if len(query) < 3:
        await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞).")
        return
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    status_msg = await msg.answer("‚è≥ –ò—â—É –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...")
    log.info("got_name_query: status message sent", user_id=msg.from_user.id)
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π —á–µ—Ä–µ–∑ OFData
        import asyncio
        client = OFDataClient()
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –Ω–∞–ø—Ä—è–º—É—é (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        search_results = client.search_filtered(
            by="name",
            obj="org", 
            query=query,
            limit=20,
            page=1
        )
        log.info("got_name_query: search results received", 
                query=query,
                search_results_type=type(search_results).__name__,
                search_results_keys=list(search_results.keys()) if isinstance(search_results, dict) else 'not dict',
                user_id=msg.from_user.id)
        # OFData API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {"data": {"–ó–∞–ø–∏—Å–∏": [...]}}
        data = search_results.get("data", {})
        companies = data.get("–ó–∞–ø–∏—Å–∏", []) or data.get("records", []) or data.get("companies", []) or []
        log.info("got_name_query: companies extracted", 
                data_keys=list(data.keys()) if isinstance(data, dict) else 'not dict',
                companies_type=type(companies).__name__,
                companies_length=len(companies) if hasattr(companies, '__len__') else 'no length',
                user_id=msg.from_user.id)
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ companies - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        if not isinstance(companies, list):
            log.error("got_name_query: companies is not a list", 
                     companies_type=type(companies).__name__,
                     companies_value=str(companies)[:200],
                     user_id=msg.from_user.id)
            await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API.")
            return
        if not companies:
            await status_msg.edit_text(
                "‚ùå –ö–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù/–û–ì–†–ù.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_search")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                ])
            )
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if len(companies) > 50:
            log.info("got_name_query: too many results", 
                    companies_count=len(companies),
                    query=query,
                    user_id=msg.from_user.id)
            await status_msg.edit_text(
                f"‚ùå –ù–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ({len(companies)} –∫–æ–º–ø–∞–Ω–∏–π).\n\n"
                "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:\n"
                "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n"
                "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù/–û–ì–†–ù –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_search")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                ])
            )
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        await state.update_data(all_companies=companies, current_page=0)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
        log.info("got_name_query: calling _show_company_choices", 
                companies_count=len(companies),
                user_id=msg.from_user.id)
        await _show_company_choices(status_msg, companies, state)
    except asyncio.TimeoutError:
        log.error("Name search timeout", user_id=msg.from_user.id)
        await status_msg.edit_text(
            "‚è∞ –ü–æ–∏—Å–∫ –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
            "üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
            "‚Ä¢ –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ API\n"
            "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n\n"
            "‚è≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –ò–ù–ù/–û–ì–†–ù.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_search")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
            ])
        )
    except (OFDataClientError, OFDataServerTemporaryError) as e:
        log.error("Name search failed", error=str(e), user_id=msg.from_user.id)
        error_msg = str(e).lower()
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 400 - –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        if "400" in error_msg or "bad request" in error_msg or "–Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" in error_msg:
            await status_msg.edit_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.\n\n"
                "üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)\n"
                "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏\n"
                "‚Ä¢ –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –í–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –ò–ù–ù/–û–ì–†–ù\n"
                "‚Ä¢ –£–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_search")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                ])
            )
        elif "timeout" in error_msg or "timed out" in error_msg:
            await status_msg.edit_text(
                "‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API.\n\n"
                "üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º\n"
                "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞\n"
                "‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ API\n\n"
                "‚è≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –ò–ù–ù/–û–ì–†–ù.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_search")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                ])
            )
        else:
            await status_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_search")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                ])
            )
    except Exception as e:
        log.error("Name search failed", 
                 error=str(e), 
                 error_type=type(e).__name__,
                 error_args=getattr(e, 'args', None),
                 user_id=msg.from_user.id)
        await status_msg.edit_text(
            f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {type(e).__name__}\n\n"
            "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –ò–ù–ù/–û–ì–†–ù\n"
            "‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_search")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
            ])
        )
@router.message(SearchState.ASK_INN)
async def got_inn_query(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ò–ù–ù/–û–ì–†–ù"""
    query = _normalize_query(msg.text or "")
    if len(query) < 10:
        await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù (10/12) –∏–ª–∏ –û–ì–†–ù (13/15) —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    # –ï—Å–ª–∏ —ç—Ç–æ –ò–ù–ù/–û–ì–†–ù ‚Äî —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç—á—ë—Ç
    if _is_inn(query) or _is_ogrn(query):
        preview = {"inn": query}
        address = None
        company_name = None
        try:
            client = OFDataClient()
            raw = client.get_counterparty(inn=query if _is_inn(query) else None, ogrn=query if _is_ogrn(query) else None)
            data = raw.get("company") or raw.get("data") or raw
            names = (data.get("company_names") or {}) if isinstance(data, dict) else {}
            company_name = (
                data.get("–ù–∞–∏–º–°–æ–∫—Ä")
                or names.get("short_name")
                or data.get("short_name")
                or data.get("–ù–∞–∏–º–ü–æ–ª–Ω")
                or names.get("full_name")
                or data.get("full_name")
                or data.get("name")
                or query
            )
            addr_obj = data.get("address") or data.get("–Æ—Ä–ê–¥—Ä–µ—Å") or {}
            if isinstance(addr_obj, dict):
                address = (
                    addr_obj.get("–ê–¥—Ä–µ—Å–†–§")
                    or addr_obj.get("value")
                    or addr_obj.get("full_address")
                    or addr_obj.get("address")
                )
            else:
                address = addr_obj if addr_obj else None
            preview.update({
                "name_full": data.get("–ù–∞–∏–º–ü–æ–ª–Ω") or names.get("full_name") or data.get("full_name") or data.get("name"),
                "name_short": data.get("–ù–∞–∏–º–°–æ–∫—Ä") or names.get("short_name") or data.get("short_name"),
                "address": address,
                "ogrn": raw.get("ogrn") or data.get("–û–ì–†–ù") or data.get("ogrn"),
            })
        except (OFDataClientError, OFDataServerTemporaryError) as e:
            log.warning("OFData preview failed", error=str(e))
        await state.update_data(
            query=query,
            company_preview=preview,
            company_name=company_name,
            company_inn=query,
            company_address=address,
        )
        details = [
            f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {company_name or query}",
            f"–ò–ù–ù: {query}",
        ]
        if address:
            details.append(f"–ê–¥—Ä–µ—Å: {address}")
        details.append("")
        details.append("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á—ë—Ç–∞:")
        await msg.answer(
            "\n".join(details),
            reply_markup=choose_report_kb(),
            disable_web_page_preview=True,
        )
        await state.set_state(SearchState.SELECT)
        return
    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –æ—Ç–∫–ª—é—á—ë–Ω
    await msg.answer("‚ùå –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∏–ª–∏ –û–ì–†–ù.")
    return
@router.callback_query(F.data == "back_search")
async def back_to_search(cb: CallbackQuery, state: FSMContext):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
    data = await state.get_data()
    if "search_type" in data and data["search_type"] == "name":
        await cb.message.edit_text(
            "üîç **–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")]
            ]),
            disable_web_page_preview=True,
        )
        await state.set_state(SearchState.ASK_NAME)
    else:
        await cb.message.edit_text(
            "üîç **–ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏**\n\n–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∏–ª–∏ –û–ì–†–ù:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")]
            ]),
            disable_web_page_preview=True,
        )
        await state.set_state(SearchState.ASK_INN)
    await cb.answer()
@router.callback_query(F.data.startswith("select_company:"))
async def select_company(cb: CallbackQuery, state: FSMContext):
    inn = cb.data.split(":", 1)[1]
    await state.update_data(query=inn)
    # –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ/–∞–¥—Ä–µ—Å/—Å—Ç–∞—Ç—É—Å –±–µ–∑ –¥–æ–ø. –∑–∞–ø—Ä–æ—Å–æ–≤
    data = await state.get_data()
    title = None
    address = None
    status_text = None
    # 1) –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–≤–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ò–ù–ù)
    preview = data.get("company_preview") or {}
    if isinstance(preview, dict):
        if (preview.get("inn") == inn) or (str(preview.get("–ò–ù–ù")) == inn):
            title = preview.get("name_short") or preview.get("name_full")
            # –ê–¥—Ä–µ—Å –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º
            addr_obj = preview.get("address") or preview.get("–Æ—Ä–ê–¥—Ä–µ—Å")
            if isinstance(addr_obj, dict):
                address = (
                    addr_obj.get("–ê–¥—Ä–µ—Å–†–§")
                    or addr_obj.get("value")
                    or addr_obj.get("full_address")
                    or addr_obj.get("address")
                )
            else:
                address = addr_obj
    # 2) –ï—Å–ª–∏ –≤—ã–±–∏—Ä–∞–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ (–≤–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
    if not title:
        companies = data.get("all_companies", []) or []
        if isinstance(companies, list):
            for c in companies:
                if not isinstance(c, dict):
                    continue
                c_inn = c.get("inn") or c.get("–ò–ù–ù") or c.get("tax_number")
                if str(c_inn) == inn:
                    name_short = c.get("–ù–∞–∏–º–°–æ–∫—Ä") or c.get("name_short") or c.get("short_name")
                    name_full = c.get("–ù–∞–∏–º–ü–æ–ª–Ω") or c.get("name_full") or c.get("full_name") or c.get("name")
                    title = name_short or name_full
                    # –∞–¥—Ä–µ—Å
                    addr_obj = c.get("–Æ—Ä–ê–¥—Ä–µ—Å") or c.get("address") or c.get("–ê–¥—Ä–µ—Å–†–§") or c.get("–ê–¥—Ä–µ—Å") or {}
                    if isinstance(addr_obj, dict):
                        address = (
                            addr_obj.get("–ê–¥—Ä–µ—Å–†–§")
                            or addr_obj.get("value")
                            or addr_obj.get("full_address")
                            or addr_obj.get("address")
                        )
                    elif isinstance(addr_obj, str):
                        address = addr_obj
                    # —Å—Ç–∞—Ç—É—Å
                    status_text = (
                        (c.get("–°—Ç–∞—Ç—É—Å") if isinstance(c.get("–°—Ç–∞—Ç—É—Å"), str) else None)
                        or (c.get("–°—Ç–∞—Ç—É—Å", {}) or {}).get("–ù–∞–∏–º")
                        or c.get("status")
                    )
                    break
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–¥–±–µ—Ä—ë–º –æ—Ç–º–µ—Ç–∫—É
    status_line = None
    if status_text:
        normalized = str(status_text).strip().lower()
        is_active = normalized in {"–¥–µ–π—Å—Ç–≤—É–µ—Ç", "active", "–∞–∫—Ç–∏–≤–µ–Ω", "–∞–∫—Ç–∏–≤–Ω–∞—è", "–∞–∫—Ç–∏–≤–Ω–æ"}
        mark = "‚úÖ" if is_active else "‚ùå"
        human_status = "–î–µ–π—Å—Ç–≤—É–µ—Ç" if is_active else "–ù–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç"
        status_line = f"–°—Ç–∞—Ç—É—Å: {mark} {human_status}"
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    lines = []
    if title:
        lines.append(title)
    else:
        lines.append("–ö–æ–º–ø–∞–Ω–∏—è")
    lines.append(f"–ò–ù–ù: {inn}")
    if address:
        lines.append(f"–ê–¥—Ä–µ—Å: {address}")
    if status_line:
        lines.append(status_line)
    lines.append("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:")
    await state.update_data(
        company_name=title or data.get("company_name"),
        company_inn=inn,
        company_address=address,
    )
    kb = choose_report_kb()
    kb.inline_keyboard.insert(2, [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_results")])
    await cb.message.edit_text("\n".join(lines), reply_markup=kb)
    await state.set_state(SearchState.SELECT)
    await cb.answer()
@router.callback_query(F.data == "back_results")
async def back_to_results(cb: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    data = await state.get_data()
    all_companies = data.get("all_companies", [])
    current_page = data.get("current_page", 0)
    if not all_companies:
        await cb.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=False)
        return
    await _show_company_choices(cb.message, all_companies, state, current_page)
    await cb.answer()
# –£–¥–∞–ª–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
async def show_page(msg_or_cbmsg, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)"""
    await msg_or_cbmsg.answer(
        "‚ÑπÔ∏è –í –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ/–≤—ã–±–æ—Ä–µ –∫–æ–º–ø–∞–Ω–∏–∏."
    )
@router.callback_query(F.data.startswith("page:"))
async def page_nav(cb: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
        page = int(cb.data.split(":")[1])
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        all_companies = data.get("all_companies", [])
        if not all_companies:
            await cb.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(current_page=page)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await _show_company_choices(cb.message, all_companies, state, page)
        log.info("page_nav: navigation successful", 
                page=page,
                total_companies=len(all_companies),
                user_id=cb.from_user.id)
    except (ValueError, IndexError) as e:
        log.error("page_nav: invalid page number", error=str(e), user_id=cb.from_user.id)
        await cb.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    except Exception as e:
        log.error("page_nav: error", error=str(e), user_id=cb.from_user.id)
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
@router.message(SearchState.PAGING)
async def select_by_number(msg: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ –Ω–æ–º–µ—Ä—É (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)"""
    await msg.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏")
@router.callback_query(F.data == "noop")
async def noop(cb: CallbackQuery, state: FSMContext):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    await cb.answer()
