# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏ (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
"""
import json
import tempfile
from typing import Optional

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile

from bot.states import SearchState, ReportState
from bot.keyboards.main import choose_report_kb, report_menu_kb
from services.aggregator import fetch_company_report_markdown, fetch_company_profile
from services.enrichment.official_sources import build_official_links
from services.enrichment.openai_gamma_enricher import generate_gamma_section
from core.logger import setup_logging
from services.providers.ofdata import OFDataClientError, OFDataServerTemporaryError
from settings import (
    REQUEST_TIMEOUT, MAX_RETRIES
)

router = Router(name="company")
log = setup_logging()


@router.callback_query(F.data == "back_results")
async def back_results(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º‚Ä¶")
    await cb.answer()
    await __import__("bot.handlers.search", fromlist=['']).show_page(cb.message, state)


@router.callback_query(F.data == "back_main")
async def back_main(cb: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    log.info("back_main: handler called", callback_data=cb.data, user_id=cb.from_user.id)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await cb.message.answer(
        "üè¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BizScan Bot!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=report_menu_kb()
    )
    
    await cb.answer()


@router.callback_query(F.data == "report_free")
async def free_report(cb: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
    log.info("free_report: handler called", callback_data=cb.data, user_id=cb.from_user.id)
    
    await cb.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    status_msg = await cb.message.answer("‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        log.info("Getting state data", user_id=cb.from_user.id)
        data = await state.get_data()
        query = data.get("query", "")
        log.info("State data retrieved", query=query, user_id=cb.from_user.id)
        
        if not query:
            log.warning("No query in state", user_id=cb.from_user.id)
            await status_msg.edit_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç –∫–æ–º–ø–∞–Ω–∏–∏
        log.info("Fetching company report", query=query, user_id=cb.from_user.id)
        response = await fetch_company_report_markdown(query)
        
        if not response or response.startswith("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π"):
            log.warning("Invalid query or company not found", query=query, user_id=cb.from_user.id)
            await status_msg.edit_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù/–û–ì–†–ù")
            return
        
        log.info("Company report fetched successfully", 
                query=query,
                response_length=len(response),
                user_id=cb.from_user.id)
        
        # –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤, –Ω–µ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        log.info("Report generated successfully", response_length=len(response), user_id=cb.from_user.id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è JSON
        log.info("Adding keyboard buttons", user_id=cb.from_user.id)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–∫–∞—á–∞—Ç—å TXT", callback_data="download_txt")],
            [InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_inn")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
        
        await status_msg.edit_text(
            "‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.",
            reply_markup=keyboard
        )
        log.info("Free report completed successfully", user_id=cb.from_user.id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è TXT
        await state.update_data(company_text=response)

        # –í—ã–≤–æ–¥ Gamma-–±–ª–æ–∫–∞ –æ—Ç–∫–ª—é—á—ë–Ω –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º UX
        
    except (OFDataClientError) as e:
        if "404" in str(e) or "409" in str(e):
            await status_msg.edit_text("‚ùå –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º.")
        elif "403" in str(e) or "401" in str(e):
            await status_msg.edit_text("‚ùå –î–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á.")
        elif "404" in str(e) and "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in str(e):
            await status_msg.edit_text("‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞.")
        else:
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    except (OFDataServerTemporaryError) as e:
        await status_msg.edit_text("‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        log.error("Free report failed", 
                 error=str(e), 
                 user_id=cb.from_user.id,
                 query=query if 'query' in locals() else None)
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


@router.callback_query(F.data == "download_txt")
async def download_txt(cb: CallbackQuery, state: FSMContext):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ TXT –æ—Ç—á—ë—Ç–∞"""
    log.info("download_txt: handler called", callback_data=cb.data, user_id=cb.from_user.id)
    
    await cb.answer()
    
    try:
        data = await state.get_data()
        company_text = data.get("company_text")
        
        if not company_text:
            await cb.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞
        lines = company_text.split('\n')
        company_name = "company"
        for line in lines:
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ "üßæ **–†–µ–∫–≤–∏–∑–∏—Ç—ã**")
            if line and not line.startswith('üßæ') and not line.startswith('–ò–ù–ù') and not line.startswith('üìÖ') and not line.startswith('**–°—Ç–∞—Ç—É—Å**'):
                if len(line) > 5:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
                    company_name = line.strip()
                    break
        
        safe_name = "".join(ch for ch in company_name if ch.isalnum() or ch in (" ", "_", "-"))[:64]
        from datetime import datetime
        today = datetime.now().strftime("%Y-%m-%d")
        filename = f"{safe_name}_{today}.txt"
        
        with tempfile.NamedTemporaryFile("w", suffix=".txt", delete=False, encoding="utf-8") as tmp:
            tmp.write(company_text)
            tmp_path = tmp.name
        
        await cb.message.answer_document(
            FSInputFile(tmp_path, filename=filename),
            caption="üìù TXT –æ—Ç—á—ë—Ç –æ –∫–æ–º–ø–∞–Ω–∏–∏"
        )
        
        import os
        try:
            os.unlink(tmp_path)
        except Exception:
            pass
        
    except Exception as e:
        log.exception("download_txt: failed", exc_info=e)
        await cb.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ TXT: {str(e)}")


@router.callback_query(F.data == "report_paid")
async def paid_report(cb: CallbackQuery, state: FSMContext):
    """–ü–ª–∞—Ç–Ω—ã–π –æ—Ç—á—ë—Ç (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)"""
    log.info("paid_report: handler called", callback_data=cb.data, user_id=cb.from_user.id)
    
    await cb.answer()
    await cb.message.answer(
        "üí∞ –ü–ª–∞—Ç–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    )


@router.callback_query(F.data == "report_txt")
async def report_txt(cb: CallbackQuery, state: FSMContext):
    """–¢–µ–∫—Å—Ç–æ–≤—ã–π –¥–∞–º–ø (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)"""
    log.info("report_txt: handler called", callback_data=cb.data, user_id=cb.from_user.id)
    
    await cb.answer()
    await cb.message.answer(
        "üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–º–ø—ã –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏."
    )