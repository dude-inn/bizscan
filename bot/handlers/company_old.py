# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""
import json
import tempfile
from typing import Optional

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile

from bot.states import SearchState, ReportState
from bot.keyboards.main import choose_report_kb, report_menu_kb
from services.aggregator import fetch_company_report_markdown, fetch_company_profile
from services.report.builder import ReportBuilder
from core.logger import setup_logging, get_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
log = get_logger(__name__)

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä
router = Router(name="company_fixed")

@router.callback_query(F.data == "report_free")
async def free_report(cb: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
    print("DEBUG: free_report handler called")  # –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥
    print(f"DEBUG: callback_data={cb.data}, user_id={cb.from_user.id}")  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    log.info("free_report: handler called", callback_data=cb.data, user_id=cb.from_user.id)
    
    await cb.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    status_msg = await cb.message.answer("‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        log.info("Getting state data", user_id=cb.from_user.id)
        data = await state.get_data()
        query = data.get("query", "")
        log.info("State data retrieved", query=query, user_id=cb.from_user.id)
        
        if not query:
            log.warning("No query in state", user_id=cb.from_user.id)
            await status_msg.edit_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        log.info("Fetching company report using new system", query=query, user_id=cb.from_user.id)
        
        # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–æ–≤–æ–≥–æ —Å–±–æ—Ä—â–∏–∫–∞ –æ—Ç—á—ë—Ç–æ–≤
        log.info("Creating ReportBuilder instance", user_id=cb.from_user.id)
        builder = ReportBuilder()
        log.info("ReportBuilder created successfully", user_id=cb.from_user.id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
        log.info("Determining identifier type", query=query, user_id=cb.from_user.id)
        if query.isdigit() and len(query) in [10, 12]:
            if len(query) == 10:
                ident = {'inn': query}
                log.info("Using INN identifier", inn=query, user_id=cb.from_user.id)
            else:
                ident = {'ogrn': query}
                log.info("Using OGRN identifier", ogrn=query, user_id=cb.from_user.id)
        else:
            # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            ident = {'name': query}
            log.info("Using name identifier", name=query, user_id=cb.from_user.id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Å–µ–∫—Ü–∏–π
        log.info("Starting report generation", ident=ident, user_id=cb.from_user.id)
        response = builder.build_simple_report(
            ident=ident,
            include=['company', 'taxes', 'finances', 'legal-cases', 'enforcements', 'inspections', 'contracts'],
            max_rows=100
        )
        log.info("Report generation completed", response_length=len(response) if response else 0, user_id=cb.from_user.id)
        
        if not response or response.startswith("‚ùå"):
            log.warning("Invalid query or company not found", query=query, response=response[:200] if response else None, user_id=cb.from_user.id)
            await status_msg.edit_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù/–û–ì–†–ù")
            return
        
        log.info("Company report fetched successfully", 
                query=query,
                response_length=len(response),
                user_id=cb.from_user.id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ —Ñ–∞–π–ª
        log.info("Saving report to temporary file", user_id=cb.from_user.id)
        with tempfile.NamedTemporaryFile(mode='w', encoding='utf-8', suffix='.txt', delete=False) as f:
            f.write(response)
            temp_path = f.name
        log.info("Report saved to temporary file", temp_path=temp_path, user_id=cb.from_user.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        log.info("Sending report file to user", user_id=cb.from_user.id)
        with open(temp_path, 'rb') as file:
            document = BufferedInputFile(
                file.read(),
                filename="company_report.txt"
            )
            
            await status_msg.edit_text("‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!")
            await cb.message.answer_document(
                document,
                caption="üìä –û—Ç—á—ë—Ç –æ –∫–æ–º–ø–∞–Ω–∏–∏\n\n–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏, –≤–∫–ª—é—á–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å, –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –¥–µ–ª–∞, –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≥–æ—Å–∑–∞–∫—É–ø–∫–∏."
            )
        log.info("Report file sent successfully", user_id=cb.from_user.id)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import os
        os.unlink(temp_path)
        log.info("Temporary file deleted", temp_path=temp_path, user_id=cb.from_user.id)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞
        await state.set_state(ReportState.choose_report)
        await cb.message.answer(
            "üìä –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=choose_report_kb()
        )
        
    except Exception as e:
        log.error("Error in free_report", error=str(e), error_type=type(e).__name__, user_id=cb.from_user.id)
        await status_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞")
