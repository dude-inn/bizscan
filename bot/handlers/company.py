# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏ (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
"""
import json
import tempfile
from typing import Optional

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile

from bot.states import SearchState, ReportState
from bot.keyboards.main import choose_report_kb, report_menu_kb
from services.aggregator import fetch_company_profile
from domain.models import CompanyAggregate
from core.logger import setup_logging
from settings import (
    DADATA_API_KEY, DADATA_SECRET_KEY,
    MSME_DATA_URL, MSME_LOCAL_FILE, FEATURE_MSME,
    EFRSB_API_URL, EFRSB_API_KEY, FEATURE_EFRSB,
    KAD_API_URL, KAD_API_KEY, FEATURE_KAD, KAD_MAX_CASES,
    REQUEST_TIMEOUT, MAX_RETRIES
)

router = Router(name="company")
log = setup_logging()


def _format_company_response(company: CompanyAggregate) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
    base = company.base
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    response = f"üßæ **–†–µ–∫–≤–∏–∑–∏—Ç—ã**\n"
    response += f"{base.name_full}"
    if base.name_short and base.name_short != base.name_full:
        response += f" ‚Ä¢ {base.name_short}"
    response += f"\n–ò–ù–ù {base.inn}"
    if base.ogrn:
        response += f" ‚Ä¢ –û–ì–†–ù {base.ogrn}"
    if base.kpp:
        response += f" ‚Ä¢ –ö–ü–ü {base.kpp}"
    
    # –ê–¥—Ä–µ—Å
    if base.address:
        qc_info = f" (qc={base.address_qc})" if base.address_qc else ""
        response += f"\nüìç **–ê–¥—Ä–µ—Å:** {base.address}{qc_info}"
    
    # –î–∞—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å
    if base.registration_date:
        response += f"\nüìÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {base.registration_date.strftime('%Y-%m-%d')}"
    if base.liquidation_date:
        response += f" ‚Ä¢ **–õ–∏–∫–≤–∏–¥–∞—Ü–∏—è:** {base.liquidation_date.strftime('%Y-%m-%d')}"
    
    status_emoji = {
        "ACTIVE": "‚úÖ",
        "LIQUIDATING": "‚ö†Ô∏è", 
        "LIQUIDATED": "‚ùå",
        "UNKNOWN": "‚ùì"
    }
    response += f"\n**–°—Ç–∞—Ç—É—Å:** {status_emoji.get(base.status, '‚ùì')} {base.status}"
    
    # –û–ö–í–≠–î
    if base.okved:
        response += f"\nüè∑Ô∏è **–û–ö–í–≠–î:** {base.okved}"
    
    # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
    if base.management_name:
        post = f" ‚Äî {base.management_post}" if base.management_post else ""
        response += f"\n\nüßë‚Äçüíº **–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å**\n{base.management_name}{post}"
    
    # –ú–°–ü
    if company.msme and company.msme.is_msme:
        category_names = {
            "micro": "–º–∏–∫—Ä–æ",
            "small": "–º–∞–ª–æ–µ", 
            "medium": "—Å—Ä–µ–¥–Ω–µ–µ"
        }
        category = category_names.get(company.msme.category, company.msme.category)
        period = f" (–Ω–∞ {company.msme.period})" if company.msme.period else ""
        response += f"\n\nüß© **–ú–°–ü**\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}{period}"
    elif company.msme:
        response += f"\n\nüß© **–ú–°–ü**\n–ù–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–±—ä–µ–∫—Ç–æ–º –ú–°–ü"
    
    # –ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ
    if company.bankruptcy:
        if company.bankruptcy.has_bankruptcy_records:
            response += f"\n\n‚öñÔ∏è **–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ**\n–ù–∞–π–¥–µ–Ω–æ {len(company.bankruptcy.records)} –∑–∞–ø–∏—Å–µ–π"
            for i, record in enumerate(company.bankruptcy.records[:3], 1):
                response += f"\n{i}. {record.get('number', 'N/A')} ‚Äî {record.get('stage', 'N/A')}"
        else:
            response += f"\n\n‚öñÔ∏è **–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ**\n–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
    
    # –ê—Ä–±–∏—Ç—Ä–∞–∂
    if company.arbitration and company.arbitration.total > 0:
        response += f"\n\nüìÑ **–ê—Ä–±–∏—Ç—Ä–∞–∂** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(company.arbitration.cases)} –∏–∑ {company.arbitration.total})"
        for i, case in enumerate(company.arbitration.cases[:3], 1):
            roles = ", ".join(case.get("roles", []))
            date_str = case.get("date", "N/A")
            instance = case.get("instance", "N/A")
            response += f"\n{i}. {case.get('number', 'N/A')} ‚Äî {roles}, {date_str} ‚Äî {instance}"
    elif company.arbitration:
        response += f"\n\nüìÑ **–ê—Ä–±–∏—Ç—Ä–∞–∂**\n–ù–µ—Ç –¥–µ–ª"
    
    # –§–∏–Ω–∞–Ω—Å—ã (DataNewton)
    if company.finances:
        response += f"\n\nüìä **–§–∏–Ω–∞–Ω—Å—ã (DataNewton)**"
        for finance in company.finances[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≥–æ–¥–∞
            year = finance.period
            revenue = f"{finance.revenue:,.0f}" if finance.revenue else "N/A"
            profit = f"{finance.net_profit:,.0f}" if finance.net_profit else "N/A"
            assets = f"{finance.assets:,.0f}" if finance.assets else "N/A"
            response += f"\n{year}: –≤—ã—Ä—É—á–∫–∞ {revenue}‚ÇΩ, –ø—Ä–∏–±—ã–ª—å {profit}‚ÇΩ, –∞–∫—Ç–∏–≤—ã {assets}‚ÇΩ"
    
    # –ó–∞–∫—É–ø–∫–∏ (–ï–ò–°)
    if company.procurement:
        contracts = company.procurement.total_contracts
        amount = f"{company.procurement.total_amount:,.0f}‚ÇΩ" if company.procurement.total_amount else "N/A"
        last_date = company.procurement.last_contract_date.strftime('%Y-%m-%d') if company.procurement.last_contract_date else "N/A"
        response += f"\n\nüõí **–ó–∞–∫—É–ø–∫–∏ (–ï–ò–°)**\n–ö–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {contracts}, —Å—É–º–º–∞: {amount}, –ø–æ—Å–ª–µ–¥–Ω–∏–π: {last_date}"
    
    # –õ–∏—Ü–µ–Ω–∑–∏–∏ (–†–ê–†)
    if company.licenses:
        active_licenses = [l for l in company.licenses if l.status == "ACTIVE"]
        inactive_licenses = [l for l in company.licenses if l.status != "ACTIVE"]
        
        response += f"\n\nü•É **–õ–∏—Ü–µ–Ω–∑–∏–∏ (–†–ê–†)**"
        if active_licenses:
            response += f"\n–ê–∫—Ç–∏–≤–Ω—ã–µ ({len(active_licenses)}):"
            for license in active_licenses[:3]:
                activity = license.activity or "N/A"
                valid_to = license.valid_to.strftime('%Y-%m-%d') if license.valid_to else "N/A"
                response += f"\n‚Ä¢ {license.number} ‚Äî {activity} (–¥–æ {valid_to})"
        
        if inactive_licenses:
            response += f"\n–ü—Ä–µ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ ({len(inactive_licenses)}):"
            for license in inactive_licenses[:2]:
                activity = license.activity or "N/A"
                response += f"\n‚Ä¢ {license.number} ‚Äî {activity}"
    
    # DataNewton extras
    extras = getattr(company, "extra", {}) or {}

    # Risks
    risks = extras.get("risks") or {}
    flags = risks.get("flags") or []
    if flags:
        true_flags = [f for f in flags if f.get("value") is True]
        if true_flags:
            response += f"\n\nüö© **–†–∏—Å–∫–∏ (DataNewton)**\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(true_flags)}"
            for f in true_flags[:5]:
                name = f.get("name", "?")
                ftype = f.get("type", "?")
                response += f"\n‚Ä¢ {name} ({ftype})"

    # Tax info (fines/debts and offences)
    tax_info = extras.get("tax_info") or {}
    fines_debts = (tax_info.get("fines_debts") or [])
    tax_off = (tax_info.get("tax_offences") or [])
    if fines_debts or tax_off:
        response += f"\n\nüíº **–ù–∞–ª–æ–≥–∏ (DataNewton)**"
        if fines_debts:
            last_fd = fines_debts[-1]
            arrears = sum((item.get("total_sum") or 0) for item in (last_fd.get("arrears_sum_infos") or []))
            response += f"\n–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏/—à—Ç—Ä–∞—Ñ—ã (–ø–æ—Å–ª.): {arrears:,.0f}‚ÇΩ"
        if tax_off:
            response += f"\n–ù–∞—Ä—É—à–µ–Ω–∏—è: {len(tax_off)}"

    # Paid taxes summary
    paid = extras.get("paid_taxes") or {}
    paid_data = paid.get("data") or []
    if paid_data:
        last = paid_data[-1]
        report_date = last.get("report_date", "")
        total_paid = 0.0
        for t in (last.get("tax_info_list") or []):
            try:
                total_paid += float(str(t.get("taxValue", "0")).replace(" ", ""))
            except Exception:
                pass
        response += f"\n\nüí≥ **–£–ø–ª–∞—á–µ–Ω–Ω—ã–µ –Ω–∞–ª–æ–≥–∏ (DataNewton)**\n{report_date}: –≤—Å–µ–≥–æ {total_paid:,.0f}‚ÇΩ"

    # Procurement summary (DN)
    ps = extras.get("procure_summary") or {}
    if ps:
        total_cnt = ps.get("total_contracts") or ps.get("count") or ps.get("contracts_count")
        total_amt = ps.get("total_amount") or ps.get("amount")
        response += "\n\nüõí **–ó–∞–∫—É–ø–∫–∏ (DataNewton)**"
        if total_cnt is not None:
            response += f"\n–ö–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {total_cnt}"
        if total_amt is not None:
            try:
                response += f"\n–°—É–º–º–∞: {float(total_amt):,.0f}‚ÇΩ"
            except Exception:
                response += f"\n–°—É–º–º–∞: {total_amt}‚ÇΩ"

    # Certificates (DN)
    certs = extras.get("certificates") or []
    if isinstance(certs, dict):
        cert_list = certs.get("items") or []
    else:
        cert_list = certs
    if cert_list:
        response += f"\n\nüìú **–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã/–¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ (DataNewton)**\n–ó–∞–ø–∏—Å–µ–π: {len(cert_list)}"

    # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
    sources = []
    for source, version in company.sources.items():
        sources.append(f"{source} ({version})")
    response += f"\n\nüîó **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** {', '.join(sources)}"
    
    return response


@router.callback_query(F.data == "back_results")
async def back_results(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º‚Ä¶")
    await cb.answer()
    await __import__("bot.handlers.search", fromlist=['']).show_page(cb.message, state)


@router.callback_query(F.data == "back_main")
async def back_main(cb: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    log.info("back_main: handler called", callback_data=cb.data, user_id=cb.from_user.id)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await cb.message.answer(
        "üè¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BizScan Bot!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=report_menu_kb()
    )
    
    await cb.answer()


@router.callback_query(F.data == "report_free")
async def free_report(cb: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
    log.info("free_report: handler called", callback_data=cb.data, user_id=cb.from_user.id)
    
    await cb.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    status_msg = await cb.message.answer("‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        log.info("Getting state data", user_id=cb.from_user.id)
        data = await state.get_data()
        query = data.get("query", "")
        log.info("State data retrieved", query=query, user_id=cb.from_user.id)
        
        if not query:
            log.warning("No query in state", user_id=cb.from_user.id)
            await status_msg.edit_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏
        log.info("Fetching company profile", query=query, user_id=cb.from_user.id)
        company = await fetch_company_profile(
            query=query,
            dadata_api_key=DADATA_API_KEY,
            dadata_secret_key=DADATA_SECRET_KEY,
            msme_data_url=MSME_DATA_URL,
            msme_local_file=MSME_LOCAL_FILE,
            efrsb_api_url=EFRSB_API_URL,
            efrsb_api_key=EFRSB_API_KEY,
            efrsb_enabled=FEATURE_EFRSB,
            kad_api_url=KAD_API_URL,
            kad_api_key=KAD_API_KEY,
            kad_enabled=FEATURE_KAD,
            kad_max_cases=KAD_MAX_CASES,
            request_timeout=REQUEST_TIMEOUT,
            max_retries=MAX_RETRIES
        )
        
        if not company:
            log.warning("Company not found", query=query, user_id=cb.from_user.id)
            await status_msg.edit_text("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        log.info("Company profile fetched successfully", 
                company_name=company.base.name_full,
                inn=company.base.inn,
                user_id=cb.from_user.id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        log.info("Formatting company response", user_id=cb.from_user.id)
        response = _format_company_response(company)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        log.info("Checking response length", response_length=len(response), user_id=cb.from_user.id)
        if len(response) > 4096:
            log.info("Response too long, splitting into parts", user_id=cb.from_user.id)
            parts = []
            current = ""
            for line in response.split('\n'):
                if len(current + line + '\n') > 4000:
                    parts.append(current.strip())
                    current = line + '\n'
                else:
                    current += line + '\n'
            if current.strip():
                parts.append(current.strip())
            
            log.info("Response split into parts", parts_count=len(parts), user_id=cb.from_user.id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
            for i, part in enumerate(parts):
                if i == 0:
                    await status_msg.edit_text(part, parse_mode="Markdown")
                else:
                    await cb.message.answer(part, parse_mode="Markdown")
        else:
            log.info("Sending single response", user_id=cb.from_user.id)
            await status_msg.edit_text(response, parse_mode="Markdown")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è JSON
        log.info("Adding keyboard buttons", user_id=cb.from_user.id)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–∫–∞—á–∞—Ç—å TXT", callback_data="download_txt")],
            [InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_inn")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
        
        await cb.message.answer(
            "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!",
            reply_markup=keyboard
        )
        log.info("Free report completed successfully", user_id=cb.from_user.id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è JSON
        await state.update_data(company_data=company.dict(), company_text=response)
        
    except Exception as e:
        log.error("Free report failed", 
                 error=str(e), 
                 user_id=cb.from_user.id,
                 query=query if 'query' in locals() else None)
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


@router.callback_query(F.data == "download_txt")
async def download_txt(cb: CallbackQuery, state: FSMContext):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ TXT –æ—Ç—á—ë—Ç–∞"""
    log.info("download_txt: handler called", callback_data=cb.data, user_id=cb.from_user.id)
    
    await cb.answer()
    
    try:
        data = await state.get_data()
        company_text = data.get("company_text")
        company_data = data.get("company_data")
        
        if not company_text or not company_data:
            await cb.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
            return
        
        company_name = company_data.get("base", {}).get("name_short") or company_data.get("base", {}).get("name_full", "company")
        safe_name = "".join(ch for ch in company_name if ch.isalnum() or ch in (" ", "_", "-"))[:64]
        filename = f"{safe_name}_report.txt"
        
        with tempfile.NamedTemporaryFile("w", suffix=".txt", delete=False, encoding="utf-8") as tmp:
            tmp.write(company_text)
            tmp_path = tmp.name
        
        await cb.message.answer_document(
            FSInputFile(tmp_path, filename=filename),
            caption="üìù TXT –æ—Ç—á—ë—Ç –æ –∫–æ–º–ø–∞–Ω–∏–∏"
        )
        
        import os
        try:
            os.unlink(tmp_path)
        except Exception:
            pass
        
    except Exception as e:
        log.exception("download_txt: failed", exc_info=e)
        await cb.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ TXT: {str(e)}")


@router.callback_query(F.data == "report_paid")
async def paid_report(cb: CallbackQuery, state: FSMContext):
    """–ü–ª–∞—Ç–Ω—ã–π –æ—Ç—á—ë—Ç (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)"""
    log.info("paid_report: handler called", callback_data=cb.data, user_id=cb.from_user.id)
    
    await cb.answer()
    await cb.message.answer(
        "üí∞ –ü–ª–∞—Ç–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    )


@router.callback_query(F.data == "report_txt")
async def report_txt(cb: CallbackQuery, state: FSMContext):
    """–¢–µ–∫—Å—Ç–æ–≤—ã–π –¥–∞–º–ø (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)"""
    log.info("report_txt: handler called", callback_data=cb.data, user_id=cb.from_user.id)
    
    await cb.answer()
    await cb.message.answer(
        "üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–º–ø—ã –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏."
    )