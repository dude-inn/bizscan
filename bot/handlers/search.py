# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
"""
import re
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from bot.keyboards.main import main_menu_kb, report_menu_kb, results_kb, choose_report_kb
from bot.states import SearchState, MenuState
from core.logger import setup_logging
from services.providers.datanewton import get_dn_client
from services.mappers.datanewton import map_company_core_to_base

router = Router(name="search")
log = setup_logging()


def _normalize_query(query: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    query = re.sub(r'\s+', ' ', query.strip())
    return query


def _is_inn(query: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –ò–ù–ù"""
    return re.match(r'^\d{10}$|^\d{12}$', query) is not None


def _is_ogrn(query: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –û–ì–†–ù"""
    return re.match(r'^\d{13}$|^\d{15}$', query) is not None


@router.callback_query(F.data == "search_inn")
async def ask_inn(cb: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ò–ù–ù/–û–ì–†–ù/–Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    await cb.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ:\n"
        "‚Ä¢ –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä)\n"
        "‚Ä¢ –û–ì–†–ù (13 –∏–ª–∏ 15 —Ü–∏—Ñ—Ä)\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
    )
    await state.set_state(SearchState.ASK_INN)
    await cb.answer()


async def _show_company_choices(message_or_cb, companies: list, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    if not companies:
        await message_or_cb.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
                                   reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                       [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_search")],
                                       [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
                                   ]))
        return

    # –ï—Å–ª–∏ –æ–¥–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è ‚Äî —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    if len(companies) == 1:
        company = companies[0]
        await state.update_data(query=company.inn)
        await message_or_cb.answer(
            f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {company.name_full} ‚Äî –ò–ù–ù {company.inn}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
            reply_markup=choose_report_kb()
        )
        await state.set_state(SearchState.SELECT)
        return

    # –ù–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = []
    for c in companies[:10]:
        title = c.name_short or c.name_full
        title = f"{title[:48]}" if len(title) > 48 else title
        buttons.append([InlineKeyboardButton(text=f"{title} ‚Äî {c.inn}", callback_data=f"select_company:{c.inn}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_search")])
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")])

    await message_or_cb.answer(
        "üìÑ –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–ø–∞–Ω–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(SearchState.PAGING)


@router.message(SearchState.ASK_INN)
async def got_query(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    query = _normalize_query(msg.text or "")
    
    if len(query) < 2:
        await msg.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ò–ù–ù/–û–ì–†–ù ‚Äî —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç—á—ë—Ç
    if _is_inn(query) or _is_ogrn(query):
        await state.update_data(query=query)
        await msg.answer(
            "‚úÖ –ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
            reply_markup=choose_report_kb()
        )
        await state.set_state(SearchState.SELECT)
        return

    # –ò–Ω–∞—á–µ ‚Äî —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: –∑–∞–ø—Ä–æ—Å–∏–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ DaData –∏ –ø–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫
    await msg.answer(f"üîç –ò—â—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {query}")
    companies = []
    try:
        client = get_dn_client()
        if client:
            s = client.suggestions(query, type="all")
            items = (s or {}).get("data") or []
            for it in items[:10]:
                core = client.get_company_core(it.get("inn") or it.get("ogrn") or "")
                base = map_company_core_to_base(core or {})
                if base:
                    companies.append(base)
    except Exception as e:
        log.error("DN name search failed", query=query, error=str(e))
        # Fallback to resolve_party if available
        try:
            client = client or get_dn_client()
            if client:
                r = client.resolve_party(query)
                items = (r or {}).get("data") or []
                for it in items[:10]:
                    core = client.get_company_core(it.get("inn") or it.get("ogrn") or "")
                    base = map_company_core_to_base(core or {})
                    if base:
                        companies.append(base)
        except Exception as e2:
            log.error("DN resolve fallback failed", query=query, error=str(e2))
    await _show_company_choices(msg, companies, state)


@router.callback_query(F.data == "back_search")
async def back_to_search(cb: CallbackQuery, state: FSMContext):
    await cb.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏**\n\n–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù/–û–ì–†–ù/–Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
    )
    await state.set_state(SearchState.ASK_INN)
    await cb.answer()


@router.callback_query(F.data.startswith("select_company:"))
async def select_company(cb: CallbackQuery, state: FSMContext):
    inn = cb.data.split(":", 1)[1]
    await state.update_data(query=inn)
    await cb.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: –ò–ù–ù {inn}. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
        reply_markup=choose_report_kb()
    )
    await state.set_state(SearchState.SELECT)
    await cb.answer()


@router.callback_query(F.data == "search_name")
async def ask_name(cb: CallbackQuery, state: FSMContext):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
    await state.set_state(SearchState.ASK_NAME)
    await cb.answer()


@router.message(SearchState.ASK_NAME)
async def got_name(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    query = _normalize_query(msg.text or "")
    
    if len(query) < 2:
        await msg.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
        return
    
    await msg.answer(f"üîç –ò—â—É: {query}")
    companies = []
    try:
        client = get_dn_client()
        if client:
            s = client.suggestions(query, type="all")
            items = (s or {}).get("data") or []
            for it in items[:10]:
                core = client.get_company_core(it.get("inn") or it.get("ogrn") or "")
                base = map_company_core_to_base(core or {})
                if base:
                    companies.append(base)
    except Exception as e:
        log.error("DN name search failed", query=query, error=str(e))
        try:
            client = client or get_dn_client()
            if client:
                r = client.resolve_party(query)
                items = (r or {}).get("data") or []
                for it in items[:10]:
                    core = client.get_company_core(it.get("inn") or it.get("ogrn") or "")
                    base = map_company_core_to_base(core or {})
                    if base:
                        companies.append(base)
        except Exception as e2:
            log.error("DN resolve fallback failed", query=query, error=str(e2))
    await _show_company_choices(msg, companies, state)


async def show_page(msg_or_cbmsg, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)"""
    await msg_or_cbmsg.answer(
        "‚ÑπÔ∏è –í –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ/–≤—ã–±–æ—Ä–µ –∫–æ–º–ø–∞–Ω–∏–∏."
    )


@router.callback_query(F.data.startswith("page:"))
async def page_nav(cb: CallbackQuery, state: FSMContext):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)"""
    await cb.answer("‚ÑπÔ∏è –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏")


@router.message(SearchState.PAGING)
async def select_by_number(msg: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ –Ω–æ–º–µ—Ä—É (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)"""
    await msg.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏")


@router.callback_query(F.data == "noop")
async def noop(cb: CallbackQuery, state: FSMContext):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    await cb.answer()