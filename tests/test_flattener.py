# -*- coding: utf-8 -*-
"""
Тесты для flattener.py
"""
import pytest
from services.report.flattener import flatten, apply_aliases, pick


class TestFlattener:
    """Тесты для функций разворачивания данных"""
    
    def test_flatten_simple_dict(self):
        """Тест разворачивания простого словаря"""
        data = {
            "ИНН": "1234567890",
            "ОГРН": "1234567890123",
            "НаимПолн": "ООО Тест"
        }
        
        result = flatten(data)
        
        assert result == {
            "ИНН": "1234567890",
            "ОГРН": "1234567890123", 
            "НаимПолн": "ООО Тест"
        }
    
    def test_flatten_nested_dict(self):
        """Тест разворачивания вложенного словаря"""
        data = {
            "Налоги": {
                "СумУпл": 1000000,
                "СведУпл": [
                    {"Наим": "НДС", "Сумма": 500000},
                    {"Наим": "Налог на прибыль", "Сумма": 300000}
                ]
            }
        }
        
        result = flatten(data)
        
        assert result == {
            "Налоги.СумУпл": 1000000,
            "Налоги.СведУпл[0].Наим": "НДС",
            "Налоги.СведУпл[0].Сумма": 500000,
            "Налоги.СведУпл[1].Наим": "Налог на прибыль",
            "Налоги.СведУпл[1].Сумма": 300000
        }
    
    def test_flatten_complex_structure(self):
        """Тест разворачивания сложной структуры с финансами"""
        data = {
            "data": {
                "2023": {
                    "2110": 10000000,
                    "2400": 2000000
                },
                "2022": {
                    "2110": 8000000,
                    "2400": 1500000
                }
            }
        }
        
        result = flatten(data)
        
        assert result == {
            "data.2023.2110": 10000000,
            "data.2023.2400": 2000000,
            "data.2022.2110": 8000000,
            "data.2022.2400": 1500000
        }
    
    def test_apply_aliases_simple(self):
        """Тест применения простых алиасов"""
        flat_data = {
            "ИНН": "1234567890",
            "ОГРН": "1234567890123",
            "НаимПолн": "ООО Тест"
        }
        
        aliases = {
            "ИНН": "ИНН",
            "ОГРН": "ОГРН", 
            "НаимПолн": "Полное наименование"
        }
        
        result = apply_aliases(flat_data, aliases)
        
        assert result == {
            "ИНН": "1234567890",
            "ОГРН": "1234567890123",
            "Полное наименование": "ООО Тест"
        }
    
    def test_apply_aliases_array_template(self):
        """Тест применения алиасов с шаблоном для массивов"""
        flat_data = {
            "Налоги.СведУпл[0].Наим": "НДС",
            "Налоги.СведУпл[0].Сумма": 500000,
            "Налоги.СведУпл[1].Наим": "Налог на прибыль",
            "Налоги.СведУпл[1].Сумма": 300000
        }
        
        aliases = {
            "Налоги.СведУпл[].Наим": "Уплаченный налог — наименование",
            "Налоги.СведУпл[].Сумма": "Уплаченный налог — сумма"
        }
        
        result = apply_aliases(flat_data, aliases)
        
        assert result == {
            "Уплаченный налог — наименование": "НДС",
            "Уплаченный налог — сумма": 500000
        }
    
    def test_apply_aliases_year_template(self):
        """Тест применения алиасов с шаблоном для годов"""
        flat_data = {
            "data.2023.2110": 10000000,
            "data.2023.2400": 2000000,
            "data.2022.2110": 8000000,
            "data.2022.2400": 1500000
        }
        
        aliases = {
            "data.<year>.2110": "Выручка (2110)",
            "data.<year>.2400": "Чистая прибыль/убыток (2400)"
        }
        
        result = apply_aliases(flat_data, aliases)
        
        assert result == {
            "Выручка (2110)": 10000000,
            "Чистая прибыль/убыток (2400)": 2000000
        }
    
    def test_apply_aliases_mixed_templates(self):
        """Тест применения смешанных шаблонов"""
        flat_data = {
            "data.2023.2110": 10000000,
            "data.2023.2400": 2000000,
            "Налоги.СведУпл[0].Наим": "НДС",
            "Налоги.СведУпл[0].Сумма": 500000
        }
        
        aliases = {
            "data.<year>.2110": "Выручка (2110)",
            "data.<year>.2400": "Чистая прибыль/убыток (2400)",
            "Налоги.СведУпл[].Наим": "Уплаченный налог — наименование",
            "Налоги.СведУпл[].Сумма": "Уплаченный налог — сумма"
        }
        
        result = apply_aliases(flat_data, aliases)
        
        assert result == {
            "Выручка (2110)": 10000000,
            "Чистая прибыль/убыток (2400)": 2000000,
            "Уплаченный налог — наименование": "НДС",
            "Уплаченный налог — сумма": 500000
        }
    
    def test_pick_prefix(self):
        """Тест извлечения данных по префиксу"""
        flat_data = {
            "Налоги.СумУпл": 1000000,
            "Налоги.СведУпл[0].Наим": "НДС",
            "Налоги.СведУпл[0].Сумма": 500000,
            "Контакты.Тел[0]": "+7-495-123-45-67",
            "Контакты.Емэйл[0]": "test@example.com"
        }
        
        result = pick(flat_data, "Налоги")
        
        assert result == {
            "СумУпл": 1000000,
            "СведУпл[0].Наим": "НДС",
            "СведУпл[0].Сумма": 500000
        }
    
    def test_pick_nonexistent_prefix(self):
        """Тест извлечения по несуществующему префиксу"""
        flat_data = {
            "Налоги.СумУпл": 1000000,
            "Контакты.Тел[0]": "+7-495-123-45-67"
        }
        
        result = pick(flat_data, "Несуществующий")
        
        assert result == {}
    
    def test_flatten_empty_data(self):
        """Тест разворачивания пустых данных"""
        result = flatten({})
        assert result == {}
        
        result = flatten([])
        assert result == {}
        
        result = flatten(None)
        assert result == {}
    
    def test_apply_aliases_no_match(self):
        """Тест применения алиасов без совпадений"""
        flat_data = {
            "НеизвестноеПоле": "значение"
        }
        
        aliases = {
            "ДругоеПоле": "Другой алиас"
        }
        
        result = apply_aliases(flat_data, aliases)
        
        # Поле без алиаса должно остаться как есть
        assert result == {
            "НеизвестноеПоле": "значение"
        }

