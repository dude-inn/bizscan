# -*- coding: utf-8 -*-
"""
Максимально простой рендерер для компании
Переводит ВСЕ поля API в человекочитаемый вид
"""
from typing import Dict, Any, List
import json


def format_value(value: Any) -> str:
    """Форматирует значение в зависимости от типа"""
    if value is None:
        return "не указано"
    
    if isinstance(value, bool):
        return "является" if value else "не является"
    
    if isinstance(value, (int, float)):
        return str(value)
    
    if isinstance(value, str):
        return value.strip()
    
    if isinstance(value, list):
        if not value:
            return "отсутствуют"
        # Для простых списков показываем все элементы
        return ", ".join([str(item) for item in value])
    
    if isinstance(value, dict):
        if not value:
            return "отсутствуют"
        # Разворачиваем словарь полностью
        parts = []
        for key, val in value.items():
            formatted_val = format_value(val)
            parts.append(f"{key}: {formatted_val}")
        return " | ".join(parts)
    
    return str(value)


def format_dict_item(item: Dict[str, Any], aliases: Dict[str, str]) -> str:
    """Форматирует элемент словаря с полным разворачиванием списков"""
    parts = []
    for key, value in item.items():
        if value is not None and value != "":
            alias = aliases.get(key, key)
            
            if isinstance(value, list):
                if not value:
                    formatted_value = "отсутствуют"
                else:
                    # Разворачиваем все элементы списка
                    list_items = []
                    for i, list_item in enumerate(value, 1):
                        if isinstance(list_item, dict):
                            # Для словарей в списке тоже разворачиваем
                            dict_parts = []
                            for sub_key, sub_value in list_item.items():
                                sub_alias = aliases.get(f"{key}.{sub_key}", aliases.get(sub_key, sub_key))
                                sub_formatted = format_value(sub_value)
                                dict_parts.append(f"{sub_alias}: {sub_formatted}")
                            list_items.append(f"{i}. {' | '.join(dict_parts)}")
                        else:
                            formatted_item = format_value(list_item)
                            list_items.append(f"{i}. {formatted_item}")
                    formatted_value = "; ".join(list_items)
            else:
                formatted_value = format_value(value)
            
            parts.append(f"{alias}: {formatted_value}")
    
    return " | ".join(parts) if parts else "отсутствуют"


def render_company_simple(data: Dict[str, Any]) -> str:
    """
    Максимально простой рендерер компании
    Показывает ВСЕ поля из API в человекочитаемом виде
    """
    lines = []
    
    # Загружаем алиасы
    aliases = load_aliases()
    
    # Заголовок
    name = data.get('НаимПолн', data.get('НаимСокр', data.get('НаимЮЛПолн', data.get('НаимЮЛСокр', 'не указано'))))
    inn = data.get('ИНН', 'не указано')
    ogrn = data.get('ОГРН', 'не указано')
    reg_date = data.get('ДатаРег', 'не указано')
    
    lines.append(f"НАЗВАНИЕ: {name}")
    lines.append(f"ИНН: {inn}")
    lines.append(f"ОГРН: {ogrn}")
    lines.append(f"ДАТА РЕГИСТРАЦИИ: {reg_date}")
    lines.append("")
    
    # Обрабатываем ВСЕ поля
    for key, value in data.items():
        if key in ['НаимПолн', 'НаимСокр', 'НаимЮЛПолн', 'НаимЮЛСокр', 'ИНН', 'ОГРН', 'ДатаРег']:
            continue  # Уже показали в заголовке
        
        # Пропускаем метаданные
        if key in ['meta', 'Метаданные']:
            continue
            
        alias = aliases.get(key, key)
        
        if isinstance(value, dict):
            if not value:
                lines.append(f"{alias}: отсутствуют")
            else:
                lines.append(f"{alias}:")
                for sub_key, sub_value in value.items():
                    sub_alias = aliases.get(f"{key}.{sub_key}", aliases.get(sub_key, sub_key))
                    # Разворачиваем списки и словари, чтобы не печатать сырые структуры
                    if isinstance(sub_value, list):
                        if not sub_value:
                            lines.append(f"  {sub_alias}: отсутствуют")
                        else:
                            lines.append(f"  {sub_alias}:")
                            for i, item in enumerate(sub_value, 1):
                                if isinstance(item, dict):
                                    formatted_item = format_dict_item(item, aliases)
                                    lines.append(f"    {i}. {formatted_item}")
                                else:
                                    lines.append(f"    {i}. {format_value(item)}")
                    elif isinstance(sub_value, dict):
                        if not sub_value:
                            lines.append(f"  {sub_alias}: отсутствуют")
                        else:
                            lines.append(f"  {sub_alias}:")
                            for sk, sv in sub_value.items():
                                s_alias = aliases.get(f"{key}.{sub_key}.{sk}", aliases.get(sk, sk))
                                lines.append(f"    {s_alias}: {format_value(sv)}")
                    else:
                        lines.append(f"  {sub_alias}: {format_value(sub_value)}")
        
        elif isinstance(value, list):
            if not value:
                lines.append(f"{alias}: отсутствуют")
            else:
                lines.append(f"{alias}:")
                for i, item in enumerate(value, 1):
                    if isinstance(item, dict):
                        formatted_item = format_dict_item(item, aliases)
                        lines.append(f"  {i}. {formatted_item}")
                    else:
                        formatted_value = format_value(item)
                        lines.append(f"  {i}. {formatted_value}")
        
        else:
            formatted_value = format_value(value)
            lines.append(f"{alias}: {formatted_value}")
    
    return "\n".join(lines)


def load_aliases() -> Dict[str, str]:
    """Загружает словарь алиасов для перевода ключей"""
    return {
        # Основные поля
        'ИНН': 'ИНН',
        'ОГРН': 'ОГРН', 
        'КПП': 'КПП',
        'ОКПО': 'ОКПО',
        'НаимПолн': 'Полное наименование',
        'НаимСокр': 'Краткое наименование',
        'НаимЮЛПолн': 'Полное наименование',
        'НаимЮЛСокр': 'Краткое наименование',
        'НаимАнгл': 'Наименование на английском',
        'ДатаРег': 'Дата регистрации',
        'ДатаЛикв': 'Дата ликвидации',
        'ДатаОГРН': 'Дата ОГРН',
        'ДатаВып': 'Дата выписки',
        
        # Статус
        'Статус': 'Статус',
        'Статус.Код': 'Код статуса',
        'Статус.Наим': 'Наименование статуса',
        
        # Адрес
        'ЮрАдрес': 'Юридический адрес',
        'ЮрАдрес.НасПункт': 'Населенный пункт',
        'ЮрАдрес.АдресРФ': 'Адрес в РФ',
        'ЮрАдрес.ИдГАР': 'Идентификатор ГАР',
        'ЮрАдрес.Недост': 'Недоступен',
        'ЮрАдрес.МассАдрес': 'Массовый адрес',
        
        # Регион
        'Регион': 'Регион',
        'Регион.Код': 'Код региона',
        'Регион.Наим': 'Наименование региона',
        
        # ОКВЭД
        'ОКВЭД': 'Основной ОКВЭД',
        'ОКВЭД.Код': 'Код ОКВЭД',
        'ОКВЭД.Наим': 'Наименование ОКВЭД',
        'ОКВЭД.Версия': 'Версия ОКВЭД',
        'ОКВЭДДоп': 'Дополнительные ОКВЭД',
        
        # Классификационные коды
        'ОКОПФ': 'ОКОПФ',
        'ОКОПФ.Код': 'Код ОКОПФ',
        'ОКОПФ.Наим': 'Наименование ОКОПФ',
        'ОКФС': 'ОКФС',
        'ОКФС.Код': 'Код ОКФС',
        'ОКФС.Наим': 'Наименование ОКФС',
        'ОКОГУ': 'ОКОГУ',
        'ОКОГУ.Код': 'Код ОКОГУ',
        'ОКОГУ.Наим': 'Наименование ОКОГУ',
        'ОКАТО': 'ОКАТО',
        'ОКАТО.Код': 'Код ОКАТО',
        'ОКАТО.Наим': 'Наименование ОКАТО',
        'ОКТМО': 'ОКТМО',
        'ОКТМО.Код': 'Код ОКТМО',
        'ОКТМО.Наим': 'Наименование ОКТМО',
        
        # Налоговые органы
        'РегФНС': 'Регистрирующий налоговый орган',
        'РегФНС.КодОрг': 'Код органа',
        'РегФНС.НаимОрг': 'Наименование органа',
        'РегФНС.АдресОрг': 'Адрес органа',
        'ТекФНС': 'Текущий налоговый орган',
        'ТекФНС.КодОрг': 'Код органа',
        'ТекФНС.НаимОрг': 'Наименование органа',
        'ТекФНС.ДатаПостУч': 'Дата постановки на учет',
        
        # Фонды
        'РегПФР': 'Регистрация в ПФР',
        'РегПФР.ДатаРег': 'Дата регистрации',
        'РегПФР.РегНомер': 'Регистрационный номер',
        'РегПФР.КодОрг': 'Код органа',
        'РегПФР.НаимОрг': 'Наименование органа',
        'РегФСС': 'Регистрация в ФСС',
        'РегФСС.ДатаРег': 'Дата регистрации',
        'РегФСС.РегНомер': 'Регистрационный номер',
        'РегФСС.КодОрг': 'Код органа',
        'РегФСС.НаимОрг': 'Наименование органа',
        
        # Уставный капитал
        'УстКап': 'Уставный капитал',
        'УстКап.Тип': 'Тип капитала',
        'УстКап.Сумма': 'Сумма капитала',
        
        # Управляющая организация
        'УпрОрг': 'Управляющая организация',
        
        # Руководство
        'Руковод': 'Руководство',
        'Руковод.ФИО': 'ФИО',
        'Руковод.ИНН': 'ИНН',
        'Руковод.ВидДолжн': 'Вид должности',
        'Руковод.НаимДолжн': 'Наименование должности',
        'Руковод.Недост': 'Недоступен',
        'Руковод.МассРуковод': 'Массовое руководство',
        'Руковод.ДисквЛицо': 'Дисквалифицированное лицо',
        'Руковод.ДатаЗаписи': 'Дата записи',
        
        # Учредители
        'Учред': 'Учредители',
        'Учред.ФЛ': 'Физические лица',
        'Учред.РосОрг': 'Российские организации',
        'Учред.ИнОрг': 'Иностранные организации',
        'Учред.ПИФ': 'ПИФ',
        'Учред.РФ': 'Российская Федерация',
        
        # Связанные учредители
        'СвязУчред': 'Связанные учредители',
        'СвязУчред.ОГРН': 'ОГРН',
        'СвязУчред.ИНН': 'ИНН',
        'СвязУчред.КПП': 'КПП',
        'СвязУчред.НаимСокр': 'Краткое наименование',
        'СвязУчред.НаимПолн': 'Полное наименование',
        'СвязУчред.ДатаРег': 'Дата регистрации',
        'СвязУчред.Статус': 'Статус',
        'СвязУчред.ДатаЛикв': 'Дата ликвидации',
        'СвязУчред.РегионКод': 'Код региона',
        'СвязУчред.ЮрАдрес': 'Юридический адрес',
        'СвязУчред.ОКВЭД': 'ОКВЭД',
        
        # Реестр акционеров
        'ДержРеестрАО': 'Реестр акционеров',
        'ДержРеестрАО.ОГРН': 'ОГРН',
        'ДержРеестрАО.ИНН': 'ИНН',
        'ДержРеестрАО.НаимПолн': 'Полное наименование',
        
        # Лицензии
        'Лиценз': 'Лицензии',
        'Лиценз.Номер': 'Номер лицензии',
        'Лиценз.Дата': 'Дата лицензии',
        'Лиценз.ДатаНач': 'Дата начала',
        'Лиценз.ДатаОконч': 'Дата окончания',
        'Лиценз.ЛицОрг': 'Лицензирующий орган',
        'Лиценз.ВидДеят': 'Вид деятельности',
        
        # Товарные знаки
        'ТоварЗнак': 'Товарные знаки',
        'ТоварЗнак.ID': 'ID',
        'ТоварЗнак.URL': 'URL',
        'ТоварЗнак.ДатаРег': 'Дата регистрации',
        'ТоварЗнак.ДатаОконч': 'Дата окончания',
        
        # Подразделения
        'Подразд': 'Подразделения',
        
        # Правопредшественники
        'Правопредш': 'Правопредшественники',
        'Правопредш.ОГРН': 'ОГРН',
        'Правопредш.ИНН': 'ИНН',
        'Правопредш.НаимПолн': 'Полное наименование',
        
        # Правопреемники
        'Правопреем': 'Правопреемники',
        
        # Контакты
        'Контакты': 'Контакты',
        'Контакты.Тел': 'Телефоны',
        'Контакты.Емэйл': 'Email',
        'Контакты.ВебСайт': 'Веб-сайт',
        
        # Налоги
        'Налоги': 'Налоги',
        
        # Реестр МСП
        'РМСП': 'Реестр МСП',
        
        # Поддержка МСП
        'ПоддержМСП': 'Поддержка МСП',
        
        # Среднесписочная численность
        'СЧР': 'Среднесписочная численность',
        
        # ЕФРСБ
        'ЕФРСБ': 'ЕФРСБ',
        
        # Флаги
        'НедобПост': 'Недостоверные показатели',
        'ДисквЛица': 'Дисквалифицированные лица',
        'МассРуковод': 'Массовое руководство',
        'МассУчред': 'Массовые учредители',
        'НелегалФин': 'Нелегальные финансы',
        'Санкции': 'Санкции',
        'СанкцииСтраны': 'Страны санкций',
        'МассАдрес': 'Массовый адрес',
        'ОгрДоступ': 'Ограниченный доступ',
        'СвязУпрОрг': 'Связанные управляющие организации',
        
        # Часто встречающиеся сокращённые поля (нормализуем подписи)
        'ДатаОконч': 'Дата окончания',
        'ДатаНач': 'Дата начала',
        'ДатаОткр': 'Дата открытия',
        'ДатаЗакр': 'Дата закрытия',
        'НаимПолн': 'Полное наименование',
        'НаимСокр': 'Краткое наименование',
        'НаимПок': 'Наименование показателя',
        'РезКапитал': 'Резервный капитал',
        'УстКапитал': 'Уставный капитал',
        'СумОтч': 'Сумма за отчётный период',
        'СумПред': 'Сумма за предыдущий период',
        'СумПрдщ': 'Сумма за предшествующий период',
        'СумПрдшв': 'Сумма за предшествующие периоды',
        'Сумма': 'Сумма',
        'СумДолг': 'Сумма долга',
        'ОстЗадолж': 'Остаток задолженности',
        'Цена': 'Цена',
        'РегНомер': 'Регистрационный номер',
        'ДатаИсп': 'Срок исполнения',
        'Номер': 'Номер',
        'Статус': 'Статус',
        'ТипРасп': 'Тип проверки',
        'ДатаНачПров': 'Дата начала проверки',
        'ДатаОконПров': 'Дата окончания проверки',
        'Цель': 'Цель',
        'ОргКонтр': 'Орган контроля',
        'Наим': 'Наименование',
        'ЕдИзм': 'Единица измерения',
        'Колво': 'Количество',
        'Период': 'Период',
        'Год': 'Год',
        'Квартал': 'Квартал',
        'Месяц': 'Месяц',
    }
