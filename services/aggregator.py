# services/aggregator.py
from __future__ import annotations

from decimal import Decimal
from typing import Optional, Tuple

from services.providers.datanewton import DataNewtonClient, DNClientError, DNServerTemporaryError
from services.mappers.datanewton import (
    map_counterparty,
    map_finance,
    map_paid_taxes,
    map_arbitration,
    CompanyCard,
    FinanceSnapshot,
    ArbitrationSummary,
)
from utils.formatting import format_amount  # —Å–¥–µ–ª–∞–π helper: Decimal -> '1 234 567‚ÇΩ' (–∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏ —Å–≤–æ–π)
from utils.log import logger  # —Ç–≤–æ–π –ª–æ–≥–≥–µ—Ä; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∑–∞–º–µ–Ω–∏ –Ω–∞ logging.getLogger(__name__)
import re


def _detect_id_kind(s: str) -> Tuple[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ('inn'|'ogrn', value) –∏–ª–∏ ('', '') –µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ."""
    s = re.sub(r"\D+", "", s or "")
    if re.fullmatch(r"\d{10}|\d{12}", s):
        return "inn", s
    if re.fullmatch(r"\d{13}|\d{15}", s):
        return "ogrn", s
    return "", ""


def _fmt_status(card: CompanyCard) -> str:
    code = card.status_code or "UNKNOWN"
    txt = card.status_text or ""
    mapping = {
        "ACTIVE": "‚úÖ –î–µ–π—Å—Ç–≤—É–µ—Ç",
        "LIQUIDATED": "‚õî –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∞",
        "NOT_ACTIVE": "‚ö†Ô∏è –ù–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç",
        "UNKNOWN": "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
    }
    base = mapping.get(code, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    if txt and txt not in base:
        return f"{base} ({txt})"
    return base


def _fmt_finances(fin_list: list[FinanceSnapshot]) -> str:
    if not fin_list:
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    lines = []
    # —É–ø–æ—Ä—è–¥–æ—á–∏–º –ø–æ –≥–æ–¥—É –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    fin_list = sorted(fin_list, key=lambda x: x.period)
    for f in fin_list:
        rev = format_amount(f.revenue) if f.revenue is not None else "N/A"
        prof = format_amount(f.net_profit) if f.net_profit is not None else "N/A"
        assets = format_amount(f.assets) if f.assets is not None else "N/A"
        lines.append(f"{f.period}: –≤—ã—Ä—É—á–∫–∞ {rev}, –ø—Ä–∏–±—ã–ª—å {prof}, –∞–∫—Ç–∏–≤—ã {assets}")
    return "\n".join(lines)


def _fmt_paid_taxes(items) -> str:
    if not items:
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    out = []
    for it in items:
        if not it.items:
            # –¥–∞—Ç–∞ –µ—Å—Ç—å ‚Äî –Ω–æ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
            out.append(f"{it.report_date}: ‚Äî")
            continue
        lines = "; ".join([f"{name} {format_amount(val)}" for name, val in it.items])
        if it.report_date:
            out.append(f"{it.report_date}: {lines}")
        else:
            out.append(lines)
    return "\n".join(out)


def _fmt_arbitration(ar: ArbitrationSummary) -> str:
    if ar.total == 0 or not ar.cases:
        return "–ù–µ—Ç –¥–µ–ª"
    lines = [f"–í—Å–µ–≥–æ –¥–µ–ª: {ar.total}"]
    for c in ar.cases:
        parts = [c.number]
        if c.date_start:
            parts.append(c.date_start)
        if c.role:
            parts.append(c.role)
        if c.claim_sum is not None:
            parts.append(f"—Å—É–º–º–∞ {format_amount(c.claim_sum)}")
        if c.court:
            parts.append(c.court)
        lines.append(" ‚Äî ".join(parts))
    return "\n".join(lines)


def _fmt_sources() -> str:
    # –ë–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞. –¢–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.
    return (
        "–ï–ì–†–Æ–õ/–†–æ—Å—Å—Ç–∞—Ç; –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∞—è –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å (–§–ù–° –ì–ò–† –ë–û); "
        "–§–ù–° ‚Äî –¥–∞–Ω–Ω—ã–µ –æ–± —É–ø–ª–∞—Ç–µ –Ω–∞–ª–æ–≥–æ–≤; –ö–∞—Ä—Ç–æ—Ç–µ–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –¥–µ–ª"
    )


def build_markdown_report(card, finances, taxes, arbitr) -> str:
    # –ê–¥—Ä–µ—Å/–û–ö–í–≠–î/—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
    address = card.address or "‚Äî"
    okved = card.okved or "‚Äî"
    head = f"{card.manager_name} ‚Äî {card.manager_post}" if (card.manager_name or card.manager_post) else "‚Äî"

    msme_line = "‚Äî"
    if card.is_msme is True:
        msme_line = "–Ø–≤–ª—è–µ—Ç—Å—è —Å—É–±—ä–µ–∫—Ç–æ–º –ú–°–ü"
    elif card.is_msme is False:
        msme_line = "–ù–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–±—ä–µ–∫—Ç–æ–º –ú–°–ü"

    md = []
    md.append("üßæ **–†–µ–∫–≤–∏–∑–∏—Ç—ã**")
    short = f' ‚Ä¢ {card.name_short}' if card.name_short else ""
    md.append(f'{card.name_full}{short}')
    md.append(f'–ò–ù–ù {card.inn} ‚Ä¢ –û–ì–†–ù {card.ogrn or "‚Äî"}{f" ‚Ä¢ –ö–ü–ü {card.kpp}" if card.kpp else ""}')
    if card.registration_date:
        md.append(f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {card.registration_date}")
    md.append(f"**–°—Ç–∞—Ç—É—Å:** {_fmt_status(card)}")
    md.append(f"üìç **–ê–¥—Ä–µ—Å:** {address}")
    md.append(f"üè∑Ô∏è **–û–ö–í–≠–î:** {okved}")
    md.append("")
    md.append("üßë‚Äçüíº **–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å**")
    md.append(head)
    md.append("")
    md.append("üß© **–ú–°–ü**")
    md.append(msme_line)
    md.append("")
    md.append("üìä **–§–∏–Ω–∞–Ω—Å—ã**")
    md.append(_fmt_finances(finances))
    md.append("")
    md.append("üí∞ **–£–ø–ª–∞—á–µ–Ω–Ω—ã–µ –Ω–∞–ª–æ–≥–∏**")
    md.append(_fmt_paid_taxes(taxes))
    md.append("")
    md.append("üìÑ **–ê—Ä–±–∏—Ç—Ä–∞–∂**")
    md.append(_fmt_arbitration(arbitr))
    md.append("")
    md.append("üîó **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** " + _fmt_sources())
    return "\n".join(md)


def fetch_company_report_markdown(query: str) -> str:
    kind, value = _detect_id_kind(query)
    if not kind:
        return "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù (10/12) –∏–ª–∏ –û–ì–†–ù (13/15)."

    client = DataNewtonClient()

    inn = value if kind == "inn" else None
    ogrn = value if kind == "ogrn" else None

    # 1) –ö–∞—Ä—Ç–æ—á–∫–∞
    try:
        raw_card = client.get_counterparty(inn=inn, ogrn=ogrn)
    except DNClientError as e:
        logger.warning("counterparty client error: %s", e)
        return f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}"
    except DNServerTemporaryError as e:
        logger.warning("counterparty server temp error: %s", e)
        raw_card = {}

    card = map_counterparty(raw_card) if raw_card else CompanyCard(
        inn=value, ogrn=None, kpp=None, name_full=value, name_short=None,
        registration_date=None, status_code="UNKNOWN", status_text=None,
        address=None, manager_name=None, manager_post=None, okved=None, is_msme=None
    )

    # 2) –§–∏–Ω–∞–Ω—Å—ã
    finances = []
    try:
        raw_fin = client.get_finance(inn=inn, ogrn=ogrn)
        finances = map_finance(raw_fin)
    except (DNClientError, DNServerTemporaryError) as e:
        logger.warning("finance error: %s", e)

    # 3) –ù–∞–ª–æ–≥–∏
    taxes = []
    try:
        raw_tax = client.get_paid_taxes(inn=inn, ogrn=ogrn)
        taxes = map_paid_taxes(raw_tax)
    except (DNClientError, DNServerTemporaryError) as e:
        logger.warning("paidTaxes error: %s", e)

    # 4) –ê—Ä–±–∏—Ç—Ä–∞–∂
    arbitr = None
    try:
        raw_arb = client.get_arbitration_cases(inn=inn, ogrn=ogrn, limit=1000, offset=0)
        arbitr = map_arbitration(raw_arb, limit=10)
    except (DNClientError, DNServerTemporaryError) as e:
        logger.warning("arbitration error: %s", e)
        arbitr = map_arbitration({"total_cases": 0, "data": []})

    return build_markdown_report(card, finances, taxes, arbitr)
