# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from core.logger import get_logger
from services.stats import StatsService
from core.config import load_settings

router = Router(name="stats")
log = get_logger(__name__)

# Admin user IDs (–¥–æ–±–∞–≤—å —Å–≤–æ–∏)
ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMIN_IDS

@router.message(F.text == "/stats")
async def stats_command(msg: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if not is_admin(msg.from_user.id):
        await msg.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    try:
        settings = load_settings()
        stats = StatsService(settings.SQLITE_PATH)
        data = await stats.get_stats(days=30)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {data['period_days']} –¥–Ω–µ–π)**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {data['total_users']} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö
üîç **–ü–æ–∏—Å–∫–∏:** {data['total_searches']}
üìÑ **–û—Ç—á—ë—Ç—ã:** {data['total_reports']}
üìà **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:** {data['conversion_rate']}%

**üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**
"""
        
        for day in data['daily_stats'][:7]:
            text += f"‚Ä¢ {day['date']}: {day['unique_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {day['searches']} –ø–æ–∏—Å–∫–æ–≤, {day['reports']} –æ—Ç—á—ë—Ç–æ–≤\n"
        
        if data['top_hours']:
            text += "\n**üïê –¢–æ–ø —á–∞—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**\n"
            for hour_data in data['top_hours']:
                text += f"‚Ä¢ {hour_data['hour']}:00 ‚Äî {hour_data['count']} —Å–æ–±—ã—Ç–∏–π\n"
        
        await msg.answer(text, parse_mode="Markdown")
        
    except Exception as e:
        log.error("Stats command failed", error=str(e), user_id=msg.from_user.id)
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@router.callback_query(F.data == "stats_7d")
async def stats_7d(cb: CallbackQuery, state: FSMContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π"""
    if not is_admin(cb.from_user.id):
        await cb.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    try:
        stats = StatsService(settings.SQLITE_PATH)
        data = await stats.get_stats(days=7)
        
        text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π**

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {data['total_users']}
üîç –ü–æ–∏—Å–∫–∏: {data['total_searches']}
üìÑ –û—Ç—á—ë—Ç—ã: {data['total_reports']}
üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {data['conversion_rate']}%
"""
        await cb.message.edit_text(text)
        await cb.answer()
        
    except Exception as e:
        log.error("Stats 7d failed", error=str(e), user_id=cb.from_user.id)
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@router.callback_query(F.data == "stats_30d")
async def stats_30d(cb: CallbackQuery, state: FSMContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π"""
    if not is_admin(cb.from_user.id):
        await cb.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    try:
        settings = load_settings()
        stats = StatsService(settings.SQLITE_PATH)
        data = await stats.get_stats(days=30)
        
        text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π**

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {data['total_users']}
üîç –ü–æ–∏—Å–∫–∏: {data['total_searches']}
üìÑ –û—Ç—á—ë—Ç—ã: {data['total_reports']}
üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {data['conversion_rate']}%
"""
        await cb.message.edit_text(text)
        await cb.answer()
        
    except Exception as e:
        log.error("Stats 30d failed", error=str(e), user_id=cb.from_user.id)
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
